<TrustFrameworkPolicy xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
                      xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
                      xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
                      PolicySchemaVersion="0.3.0.0" TenantId="appcentertrust.onmicrosoft.com" 
                      PolicyId="B2C_1A_B2CTrustFrameworkBaseV2" 
                      PublicPolicyUri="http://appcentertrust.onmicrosoft.com" 
                      TenantObjectId="f2b561cb-a519-4357-a9ac-7b051622fd4f">

  
  <BuildingBlocks>
    <ClaimsSchema>
      <ClaimType Id="UserId">
        <DisplayName>Username</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText>Your username.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The username you have provided is not valid. It must begin with an alphabetical character or number, and can only contain alphanumeric characters and the following symbols: _ -" />
        </Restriction>
      </ClaimType>
      <ClaimType Id="numericUserId">
        <DisplayName>Numeric User Identity</DisplayName>
        <DataType>long</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="logonIdentifier">
        <DisplayName>Username or email address</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Username or email address that the user can use to sign in.</AdminHelpText>
        <UserHelpText>Your username or email address.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
        <!-- TODO Need to renable this so that client-side email validation works. However this causes aserver side failure
        when using username as the logonIdentifier -->
        <!--Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9!#$%&amp;'+^_`{}~-]+(?:\.[a-zA-Z0-9!#$%&amp;'+^_`{}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$" HelpText="Please enter a valid email address." />
        </Restriction-->
      </ClaimType>
      <ClaimType Id="identityProviderAccessToken">
        <DisplayName>Identity Provider Access Token</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="idp_access_token" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="idp_access_token" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The access token returned by the identity provider.</AdminHelpText>
        <UserHelpText>The access token returned by the identity provider.</UserHelpText>
      </ClaimType>
      <ClaimType Id="identityProviderIDToken">
        <DisplayName>Identity Provider ID Token</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="idp_id_token" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="idp_id_token" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The ID token returned by the identity provider.</AdminHelpText>
        <UserHelpText>The ID token returned by the identity provider.</UserHelpText>
      </ClaimType>
      <ClaimType Id="tenantId">
        <DisplayName>User's Object's Tenant ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/tenantid" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>Tenant identifier (ID) of the user object in Azure AD.</AdminHelpText>
        <UserHelpText>Tenant identifier (ID) of the user object in Azure AD.</UserHelpText>
      </ClaimType>
      <ClaimType Id="objectId">
        <DisplayName>User's Object ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="oid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="oid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/objectidentifier" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>Object identifier (ID) of the user object in Azure AD.</AdminHelpText>
        <UserHelpText>Object identifier (ID) of the user object in Azure AD.</UserHelpText>
      </ClaimType>
      <ClaimType Id="accountEnabled">
        <DisplayName>Account Enabled</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Specifies whether the user's account is enabled.</AdminHelpText>
        <UserHelpText>Specifies whether your account is enabled.</UserHelpText>
      </ClaimType>
      <ClaimType Id="password">
        <DisplayName>Password</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Enter password</AdminHelpText>
        <UserHelpText>Enter password</UserHelpText>
        <UserInputType>Password</UserInputType>
      </ClaimType>
      <ClaimType Id="newPassword">
        <DisplayName>New Password</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Enter new password</AdminHelpText>
        <UserHelpText>Enter new password</UserHelpText>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText="8-16 characters, containing 3 out of 4 of the following: Lowercase characters, uppercase characters, digits (0-9), and one or more of the following symbols: @ # $ % ^ &amp; * - _ + = [ ] { } | \ : ' , ? / ` ~ &quot; ( ) ; ." />
        </Restriction>
      </ClaimType>
      <!-- The password regex is constructed for AAD passwords based on restrictions at https://msdn.microsoft.com/en-us/library/azure/jj943764.aspx

        ^( # one of the following four combinations must appear in the password
         (?=.*[a-z])(?=.*[A-Z])(?=.*\d) |            # matches lower case, upper case or digit
         (?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9]) |  # matches lower case, upper case or special character (i.e. non-alpha or digit)
         (?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9]) |     # matches lower case, digit, or special character
         (?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9])       # matches upper case, digit, or special character
        )
        ( # The password must match the following restrictions
         [A-Za-z\d@#$%^&*\-_+=[\]{}|\\:',?/`~"();!] |   # The list of all acceptable characters (without .)
         \.(?!@)                                        # or . can appear as long as not followed by @
        ) {8,16}$                                       # the length must be between 8 and 16 chars inclusive

      -->
      <ClaimType Id="reenterPassword">
        <DisplayName>Confirm New Password</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Confirm new password</AdminHelpText>
        <UserHelpText>Confirm new password</UserHelpText>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText="8-16 characters, containing 3 out of 4 of the following: Lowercase characters, uppercase characters, digits (0-9), and one or more of the following symbols: @ # $ % ^ &amp; * - _ + = [ ] { } | \ : ' , ? / ` ~ &quot; ( ) ; ." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="passwordPolicies">
        <DisplayName>Password Policies</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Password policies used by MSODS to determine password strength, expiry etc.</AdminHelpText>
        <UserHelpText>Password policies used by MSODS to determine password strength, expiry etc.</UserHelpText>
      </ClaimType>
      <ClaimType Id="sub">
        <DisplayName>Subject</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OpenIdConnect" PartnerClaimType="sub" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="alternativeSecurityId">
        <DisplayName>AlternativeSecurityId</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="identityProvider">
        <DisplayName>Identity Provider</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="idp" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="idp" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/identityprovider" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The social identity provider used by the user to access to your application</AdminHelpText>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="trustFrameworkPolicy">
        <DisplayName>Trust Framework Policy</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tfp" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tfp" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The trust framework policy that was used to generate the token</AdminHelpText>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="displayName">
        <DisplayName>Display Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="unique_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>Display Name of the User</AdminHelpText>
        <UserHelpText>Your display name.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationPhoneNumber">
        <DisplayName>Phone Number</DisplayName>
        <DataType>string</DataType>
        <Mask Type="Simple">XXX-XXX-</Mask>
        <AdminHelpText>User's telephone number</AdminHelpText>
        <UserHelpText>Your telephone number</UserHelpText>
      </ClaimType>
      <ClaimType Id="Verified.strongAuthenticationPhoneNumber">
        <DisplayName>Verified Phone Number</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OpenIdConnect" PartnerClaimType="phone_number" />
        </DefaultPartnerClaimTypes>
        <Mask Type="Simple">XXX-XXX-</Mask>
        <AdminHelpText>User's office phone number that has been verified</AdminHelpText>
        <UserHelpText>Your office phone number that has been verified</UserHelpText>
      </ClaimType>
      <ClaimType Id="email">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OpenIdConnect" PartnerClaimType="email" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>Email address of the user</AdminHelpText>
        <UserHelpText>Email address that can be used to contact you.</UserHelpText>
        <UserInputType>EmailBox</UserInputType>
        <!--
          This regex is constructed mostly from RFC 5322 for email, with intentional omissions based on discovery of characters that don't work for other services we use
          # the below two lines cover the local part of the email, before the '@' sign
          [a-zA-Z0-9!#$%&amp;'+^_`{}~-]+         # matches lower or upper case letters, digits, and certain special characters
          (?:\.[a-zA-Z0-9!#$%&amp;'+^_`{}~-]+)*  # same list as above, but including an optional '.' character at the beginning, repeated
          # together, the above two lines prevent the '.' character from appearing at the start, end, or twice in a row in the local part
          @                                      # the '@' symbol appears exactly once, seperating the local and domain sections
          (?:[a-zA-Z0-9]                         # matches lower and uppercase letters and digits
          (?:[a-zA-Z0-9-]*                       # same as above, but also allowing '-'
          [a-zA-Z0-9])                           # only lower and uppercase letters and digits again
          ?\.)+                                  # allows for a '.' character to terminate a section
          # the above lines mean that '.' can create segments, and segments can't begin or end with a '-'. Also, no repeating '.' chars
          [a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$
          # the above line is the essentially same as the previous section, but forces the email to not end with a '.'
        -->
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9!#$%&amp;'+^_`{}~-]+(?:\.[a-zA-Z0-9!#$%&amp;'+^_`{}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?$" HelpText="Please enter a valid email address." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="emails">
        <DisplayName>Email Addresses</DisplayName>
        <DataType>stringCollection</DataType>
        <AdminHelpText>Email addresses of the user.</AdminHelpText>
        <UserHelpText>Your email addresses.</UserHelpText>
      </ClaimType>
      <ClaimType Id="signInNamesInfo.emailAddress">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Email address that the user can use to sign in.</AdminHelpText>
        <UserHelpText>Email address to use for signing in.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationEmailAddress">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Email address that the user can use for strong authentication.</AdminHelpText>
        <UserHelpText>Email address to use for strong authentication.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="otherMails">
        <DisplayName>Alternate Email Addresses</DisplayName>
        <DataType>stringCollection</DataType>
        <AdminHelpText>Email addresses that can be used to contact the user.</AdminHelpText>
        <UserHelpText>Email addresses that can be used to contact the user.</UserHelpText>
      </ClaimType>
      <ClaimType Id="userPrincipalName">
        <DisplayName>UserPrincipalName</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="upn" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="upn" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/userprincipalname" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The user name as stored in the Azure Active Directory.</AdminHelpText>
        <UserHelpText>Your user name as stored in the Azure Active Directory.</UserHelpText>
      </ClaimType>
      <ClaimType Id="upnUserName">
        <DisplayName>UPN User Name</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The user name for creating user principal name.</AdminHelpText>
        <UserHelpText>The user name for creating user principal name.</UserHelpText>
      </ClaimType>
      <ClaimType Id="mailNickName">
        <DisplayName>MailNickName</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The user's mail nick name as stored in the Azure Active Directory.</AdminHelpText>
        <UserHelpText>Your mail nick name as stored in the Azure Active Directory.</UserHelpText>
      </ClaimType>
      <ClaimType Id="givenName">
        <DisplayName>Given Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="given_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="given_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The user's given name (also known as first name).</AdminHelpText>
        <UserHelpText>Your given name (also known as first name).</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="surname">
        <DisplayName>Surname</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="family_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="family_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname" />
        </DefaultPartnerClaimTypes>
        <AdminHelpText>The user's surname (also known as family name or last name).</AdminHelpText>
        <UserHelpText>Your surname (also known as family name or last name).</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="jobTitle">
        <DisplayName>Job Title</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The user's job title.</AdminHelpText>
        <UserHelpText>Your job title.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="streetAddress">
        <DisplayName>Street Address</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The street address where the user is located</AdminHelpText>
        <UserHelpText>The street address at which you are located.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="city">
        <DisplayName>City</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The city in which the user is located.</AdminHelpText>
        <UserHelpText>The city in which you are located.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="postalCode">
        <DisplayName>Postal Code</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The postal code of the user's address.</AdminHelpText>
        <UserHelpText>The postal code of your address.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="state">
        <DisplayName>State/Province</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The state or province in user's address.</AdminHelpText>
        <UserHelpText>Your residential state or province.</UserHelpText>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="ncaslice">
        <DisplayName>Evo slice query string parameter</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText>Run against evo test or prod slice.</UserHelpText>
      </ClaimType>
      <ClaimType Id="country">
        <!-- Do not change the display name without consulting geo-political guidelines. The list below contains both countries and regions and
          thus the display name must appear as country/region. See http://gpweb/KBArticle/ViewHtmlPage/1 for more details. -->
        <DisplayName>Country/Region</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The country/region in which the user is located.</AdminHelpText>
        <UserHelpText>The country/region in which you are located.</UserHelpText>
        <UserInputType>DropdownSingleSelect</UserInputType>
        <Restriction>
          <!-- The following is the approved short-form Microsoft country list, taken from http://gpweb/marketreadiness/officialCountryRegion -->
          <Enumeration Text="Afghanistan" Value="Afghanistan" />
          <Enumeration Text="Åland Islands" Value="Åland Islands" />
          <Enumeration Text="Albania" Value="Albania" />
          <Enumeration Text="Algeria" Value="Algeria" />
          <Enumeration Text="American Samoa" Value="American Samoa" />
          <Enumeration Text="Andorra" Value="Andorra" />
          <Enumeration Text="Angola" Value="Angola" />
          <Enumeration Text="Anguilla" Value="Anguilla" />
          <Enumeration Text="Antarctica" Value="Antarctica" />
          <Enumeration Text="Antigua and Barbuda" Value="Antigua and Barbuda" />
          <Enumeration Text="Argentina" Value="Argentina" />
          <Enumeration Text="Armenia" Value="Armenia" />
          <Enumeration Text="Aruba" Value="Aruba" />
          <Enumeration Text="Australia" Value="Australia" />
          <Enumeration Text="Austria" Value="Austria" />
          <Enumeration Text="Azerbaijan" Value="Azerbaijan" />
          <Enumeration Text="Bahamas" Value="Bahamas" />
          <Enumeration Text="Bahrain" Value="Bahrain" />
          <Enumeration Text="Bangladesh" Value="Bangladesh" />
          <Enumeration Text="Barbados" Value="Barbados" />
          <Enumeration Text="Belarus" Value="Belarus" />
          <Enumeration Text="Belgium" Value="Belgium" />
          <Enumeration Text="Belize" Value="Belize" />
          <Enumeration Text="Benin" Value="Benin" />
          <Enumeration Text="Bermuda" Value="Bermuda" />
          <Enumeration Text="Bhutan" Value="Bhutan" />
          <Enumeration Text="Bolivia" Value="Bolivia" />
          <Enumeration Text="Bonaire" Value="Bonaire" />
          <Enumeration Text="Bosnia and Herzegovina" Value="Bosnia and Herzegovina" />
          <Enumeration Text="Botswana" Value="Botswana" />
          <Enumeration Text="Bouvet Island" Value="Bouvet Island" />
          <Enumeration Text="Brazil" Value="Brazil" />
          <Enumeration Text="British Indian Ocean Territory" Value="British Indian Ocean Territory" />
          <Enumeration Text="British Virgin Islands" Value="British Virgin Islands" />
          <Enumeration Text="Brunei" Value="Brunei" />
          <Enumeration Text="Bulgaria" Value="Bulgaria" />
          <Enumeration Text="Burkina Faso" Value="Burkina Faso" />
          <Enumeration Text="Burundi" Value="Burundi" />
          <Enumeration Text="Cabo Verde" Value="Cabo Verde" />
          <Enumeration Text="Cambodia" Value="Cambodia" />
          <Enumeration Text="Cameroon" Value="Cameroon" />
          <Enumeration Text="Canada" Value="Canada" />
          <Enumeration Text="Cayman Islands" Value="Cayman Islands" />
          <Enumeration Text="Central African Republic" Value="Central African Republic" />
          <Enumeration Text="Chad" Value="Chad" />
          <Enumeration Text="Chile" Value="Chile" />
          <Enumeration Text="China" Value="China" />
          <Enumeration Text="Christmas Island" Value="Christmas Island" />
          <Enumeration Text="Cocos (Keeling) Islands" Value="Cocos (Keeling) Islands" />
          <Enumeration Text="Colombia" Value="Colombia" />
          <Enumeration Text="Comoros" Value="Comoros" />
          <Enumeration Text="Congo" Value="Congo" />
          <Enumeration Text="Congo (DRC)" Value="Congo (DRC)" />
          <Enumeration Text="Cook Islands" Value="Cook Islands" />
          <Enumeration Text="Costa Rica" Value="Costa Rica" />
          <Enumeration Text="Côte d’Ivoire" Value="Côte d’Ivoire" />
          <Enumeration Text="Croatia" Value="Croatia" />
          <Enumeration Text="Cuba" Value="Cuba" />
          <Enumeration Text="Curaçao" Value="Curaçao" />
          <Enumeration Text="Cyprus" Value="Cyprus" />
          <Enumeration Text="Czech Republic" Value="Czech Republic" />
          <Enumeration Text="Denmark" Value="Denmark" />
          <Enumeration Text="Djibouti" Value="Djibouti" />
          <Enumeration Text="Dominica" Value="Dominica" />
          <Enumeration Text="Dominican Republic" Value="Dominican Republic" />
          <Enumeration Text="Ecuador" Value="Ecuador" />
          <Enumeration Text="Egypt" Value="Egypt" />
          <Enumeration Text="El Salvador" Value="El Salvador" />
          <Enumeration Text="Equatorial Guinea" Value="Equatorial Guinea" />
          <Enumeration Text="Eritrea" Value="Eritrea" />
          <Enumeration Text="Estonia" Value="Estonia" />
          <Enumeration Text="Ethiopia" Value="Ethiopia" />
          <Enumeration Text="Falkland Islands" Value="Falkland Islands" />
          <Enumeration Text="Faroe Islands" Value="Faroe Islands" />
          <Enumeration Text="Fiji" Value="Fiji" />
          <Enumeration Text="Finland" Value="Finland" />
          <Enumeration Text="France" Value="France" />
          <Enumeration Text="French Guiana" Value="French Guiana" />
          <Enumeration Text="French Polynesia" Value="French Polynesia" />
          <Enumeration Text="French Southern Territories" Value="French Southern Territories" />
          <Enumeration Text="Gabon" Value="Gabon" />
          <Enumeration Text="Gambia" Value="Gambia" />
          <Enumeration Text="Georgia" Value="Georgia" />
          <Enumeration Text="Germany" Value="Germany" />
          <Enumeration Text="Ghana" Value="Ghana" />
          <Enumeration Text="Gibraltar" Value="Gibraltar" />
          <Enumeration Text="Greece" Value="Greece" />
          <Enumeration Text="Greenland" Value="Greenland" />
          <Enumeration Text="Grenada" Value="Grenada" />
          <Enumeration Text="Guadeloupe" Value="Guadeloupe" />
          <Enumeration Text="Guam" Value="Guam" />
          <Enumeration Text="Guatemala" Value="Guatemala" />
          <Enumeration Text="Guernsey" Value="Guernsey" />
          <Enumeration Text="Guinea" Value="Guinea" />
          <Enumeration Text="Guinea-Bissau" Value="Guinea-Bissau" />
          <Enumeration Text="Guyana" Value="Guyana" />
          <Enumeration Text="Haiti" Value="Haiti" />
          <Enumeration Text="Heard Island and McDonald Islands" Value="Heard Island and McDonald Islands" />
          <Enumeration Text="Honduras" Value="Honduras" />
          <Enumeration Text="Hong Kong SAR" Value="Hong Kong SAR" />
          <Enumeration Text="Hungary" Value="Hungary" />
          <Enumeration Text="Iceland" Value="Iceland" />
          <Enumeration Text="India" Value="India" />
          <Enumeration Text="Indonesia" Value="Indonesia" />
          <Enumeration Text="Iran" Value="Iran" />
          <Enumeration Text="Iraq" Value="Iraq" />
          <Enumeration Text="Ireland" Value="Ireland" />
          <Enumeration Text="Isle of Man" Value="Isle of Man" />
          <Enumeration Text="Israel" Value="Israel" />
          <Enumeration Text="Italy" Value="Italy" />
          <Enumeration Text="Jamaica" Value="Jamaica" />
          <Enumeration Text="Jan Mayen" Value="Jan Mayen" />
          <Enumeration Text="Japan" Value="Japan" />
          <Enumeration Text="Jersey" Value="Jersey" />
          <Enumeration Text="Jordan" Value="Jordan" />
          <Enumeration Text="Kazakhstan" Value="Kazakhstan" />
          <Enumeration Text="Kenya" Value="Kenya" />
          <Enumeration Text="Kiribati" Value="Kiribati" />
          <Enumeration Text="Korea" Value="Korea" />
          <Enumeration Text="Kosovo" Value="Kosovo" />
          <Enumeration Text="Kuwait" Value="Kuwait" />
          <Enumeration Text="Kyrgyzstan" Value="Kyrgyzstan" />
          <Enumeration Text="Laos" Value="Laos" />
          <Enumeration Text="Latvia" Value="Latvia" />
          <Enumeration Text="Lebanon" Value="Lebanon" />
          <Enumeration Text="Lesotho" Value="Lesotho" />
          <Enumeration Text="Liberia" Value="Liberia" />
          <Enumeration Text="Libya" Value="Libya" />
          <Enumeration Text="Liechtenstein" Value="Liechtenstein" />
          <Enumeration Text="Lithuania" Value="Lithuania" />
          <Enumeration Text="Luxembourg" Value="Luxembourg" />
          <Enumeration Text="Macao SAR" Value="Macao SAR" />
          <Enumeration Text="Macedonia, FYRO" Value="Macedonia, FYRO" />
          <Enumeration Text="Madagascar" Value="Madagascar" />
          <Enumeration Text="Malawi" Value="Malawi" />
          <Enumeration Text="Malaysia" Value="Malaysia" />
          <Enumeration Text="Maldives" Value="Maldives" />
          <Enumeration Text="Mali" Value="Mali" />
          <Enumeration Text="Malta" Value="Malta" />
          <Enumeration Text="Marshall Islands" Value="Marshall Islands" />
          <Enumeration Text="Martinique" Value="Martinique" />
          <Enumeration Text="Mauritania" Value="Mauritania" />
          <Enumeration Text="Mauritius" Value="Mauritius" />
          <Enumeration Text="Mayotte" Value="Mayotte" />
          <Enumeration Text="Mexico" Value="Mexico" />
          <Enumeration Text="Micronesia" Value="Micronesia" />
          <Enumeration Text="Moldova" Value="Moldova" />
          <Enumeration Text="Monaco" Value="Monaco" />
          <Enumeration Text="Mongolia" Value="Mongolia" />
          <Enumeration Text="Montenegro" Value="Montenegro" />
          <Enumeration Text="Montserrat" Value="Montserrat" />
          <Enumeration Text="Morocco" Value="Morocco" />
          <Enumeration Text="Mozambique" Value="Mozambique" />
          <Enumeration Text="Myanmar" Value="Myanmar" />
          <Enumeration Text="Namibia" Value="Namibia" />
          <Enumeration Text="Nauru" Value="Nauru" />
          <Enumeration Text="Nepal" Value="Nepal" />
          <Enumeration Text="Netherlands" Value="Netherlands" />
          <Enumeration Text="New Caledonia" Value="New Caledonia" />
          <Enumeration Text="New Zealand" Value="New Zealand" />
          <Enumeration Text="Nicaragua" Value="Nicaragua" />
          <Enumeration Text="Niger" Value="Niger" />
          <Enumeration Text="Nigeria" Value="Nigeria" />
          <Enumeration Text="Niue" Value="Niue" />
          <Enumeration Text="Norfolk Island" Value="Norfolk Island" />
          <Enumeration Text="North Korea" Value="North Korea" />
          <Enumeration Text="Northern Mariana Islands" Value="Northern Mariana Islands" />
          <Enumeration Text="Norway" Value="Norway" />
          <Enumeration Text="Oman" Value="Oman" />
          <Enumeration Text="Pakistan" Value="Pakistan" />
          <Enumeration Text="Palau" Value="Palau" />
          <Enumeration Text="Palestinian Authority" Value="Palestinian Authority" />
          <Enumeration Text="Panama" Value="Panama" />
          <Enumeration Text="Papua New Guinea" Value="Papua New Guinea" />
          <Enumeration Text="Paraguay" Value="Paraguay" />
          <Enumeration Text="Peru" Value="Peru" />
          <Enumeration Text="Philippines" Value="Philippines" />
          <Enumeration Text="Pitcairn Islands" Value="Pitcairn Islands" />
          <Enumeration Text="Poland" Value="Poland" />
          <Enumeration Text="Portugal" Value="Portugal" />
          <Enumeration Text="Puerto Rico" Value="Puerto Rico" />
          <Enumeration Text="Qatar" Value="Qatar" />
          <Enumeration Text="Réunion" Value="Réunion" />
          <Enumeration Text="Romania" Value="Romania" />
          <Enumeration Text="Russia" Value="Russia" />
          <Enumeration Text="Rwanda" Value="Rwanda" />
          <Enumeration Text="Saba" Value="Saba" />
          <Enumeration Text="Saint Barthélemy" Value="Saint Barthélemy" />
          <Enumeration Text="Saint Kitts and Nevis" Value="Saint Kitts and Nevis" />
          <Enumeration Text="Saint Lucia" Value="Saint Lucia" />
          <Enumeration Text="Saint Martin" Value="Saint Martin" />
          <Enumeration Text="Saint Pierre and Miquelon" Value="Saint Pierre and Miquelon" />
          <Enumeration Text="Saint Vincent and the Grenadines" Value="Saint Vincent and the Grenadines" />
          <Enumeration Text="Samoa" Value="Samoa" />
          <Enumeration Text="San Marino" Value="San Marino" />
          <Enumeration Text="São Tomé and Príncipe" Value="São Tomé and Príncipe" />
          <Enumeration Text="Saudi Arabia" Value="Saudi Arabia" />
          <Enumeration Text="Senegal" Value="Senegal" />
          <Enumeration Text="Serbia" Value="Serbia" />
          <Enumeration Text="Seychelles" Value="Seychelles" />
          <Enumeration Text="Sierra Leone" Value="Sierra Leone" />
          <Enumeration Text="Singapore" Value="Singapore" />
          <Enumeration Text="Sint Eustatius" Value="Sint Eustatius" />
          <Enumeration Text="Sint Maarten" Value="Sint Maarten" />
          <Enumeration Text="Slovakia" Value="Slovakia" />
          <Enumeration Text="Slovenia" Value="Slovenia" />
          <Enumeration Text="Solomon Islands" Value="Solomon Islands" />
          <Enumeration Text="Somalia" Value="Somalia" />
          <Enumeration Text="South Africa" Value="South Africa" />
          <Enumeration Text="South Georgia and the South Sandwich Islands" Value="South Georgia and the South Sandwich Islands" />
          <Enumeration Text="South Sudan" Value="South Sudan" />
          <Enumeration Text="Spain" Value="Spain" />
          <Enumeration Text="Sri Lanka" Value="Sri Lanka" />
          <Enumeration Text="St Helena, Ascension, Tristan da Cunha" Value="St Helena, Ascension, Tristan da Cunha" />
          <Enumeration Text="Sudan" Value="Sudan" />
          <Enumeration Text="Suriname" Value="Suriname" />
          <Enumeration Text="Svalbard" Value="Svalbard" />
          <Enumeration Text="Swaziland" Value="Swaziland" />
          <Enumeration Text="Sweden" Value="Sweden" />
          <Enumeration Text="Switzerland" Value="Switzerland" />
          <Enumeration Text="Syria" Value="Syria" />
          <Enumeration Text="Taiwan" Value="Taiwan" />
          <Enumeration Text="Tajikistan" Value="Tajikistan" />
          <Enumeration Text="Tanzania" Value="Tanzania" />
          <Enumeration Text="Thailand" Value="Thailand" />
          <Enumeration Text="Timor-Leste" Value="Timor-Leste" />
          <Enumeration Text="Togo" Value="Togo" />
          <Enumeration Text="Tokelau" Value="Tokelau" />
          <Enumeration Text="Tonga" Value="Tonga" />
          <Enumeration Text="Trinidad and Tobago" Value="Trinidad and Tobago" />
          <Enumeration Text="Tunisia" Value="Tunisia" />
          <Enumeration Text="Turkey" Value="Turkey" />
          <Enumeration Text="Turkmenistan" Value="Turkmenistan" />
          <Enumeration Text="Turks and Caicos Islands" Value="Turks and Caicos Islands" />
          <Enumeration Text="Tuvalu" Value="Tuvalu" />
          <Enumeration Text="U.S. Outlying Islands" Value="U.S. Outlying Islands" />
          <Enumeration Text="U.S. Virgin Islands" Value="U.S. Virgin Islands" />
          <Enumeration Text="Uganda" Value="Uganda" />
          <Enumeration Text="Ukraine" Value="Ukraine" />
          <Enumeration Text="United Arab Emirates" Value="United Arab Emirates" />
          <Enumeration Text="United Kingdom" Value="United Kingdom" />
          <Enumeration Text="United States" Value="United States" />
          <Enumeration Text="Uruguay" Value="Uruguay" />
          <Enumeration Text="Uzbekistan" Value="Uzbekistan" />
          <Enumeration Text="Vanuatu" Value="Vanuatu" />
          <Enumeration Text="Vatican City" Value="Vatican City" />
          <Enumeration Text="Venezuela" Value="Venezuela" />
          <Enumeration Text="Vietnam" Value="Vietnam" />
          <Enumeration Text="Wallis and Futuna" Value="Wallis and Futuna" />
          <Enumeration Text="Yemen" Value="Yemen" />
          <Enumeration Text="Zambia" Value="Zambia" />
          <Enumeration Text="Zimbabwe" Value="Zimbabwe" />
        </Restriction>
      </ClaimType>
      <ClaimType Id="newUser">
        <DisplayName>User is new</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if the user has just signed-up for your application</AdminHelpText>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="IP-Address">
        <DisplayName>IP Address</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="executed-SelfAsserted-Input">
        <DisplayName>Executed-SelfAsserted-Input</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim that specifies whether attributes were collected from the user.</AdminHelpText>
        <UserHelpText>A claim that specifies whether attributes were collected from the user.</UserHelpText>
      </ClaimType>
      <ClaimType Id="executed-PhoneFactor">
        <DisplayName>Executed-PhoneFactor</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>A claim that specifies whether MFA has been executed.</AdminHelpText>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="executed-PhoneFactor-Input">
        <DisplayName>Executed-PhoneFactor-Input</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim that specifies whether a new phone number was collected from the user.</AdminHelpText>
        <UserHelpText>A claim that specifies whether a new phone number was collected from the user.</UserHelpText>
      </ClaimType>
      <ClaimType Id="executed-PhoneFactor-Input-V3">
        <DisplayName>executed-PhoneFactor-Input-V3</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if the a strong authentication phone number was collected from the user</AdminHelpText>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="authenticationSource">
        <DisplayName>AuthenticationSource</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Specifies whether the user was authenticated at Social IDP or EvoSTS or local account.</AdminHelpText>
        <UserHelpText>Specifies whether the user was authenticated at Social IDP or EvoSTS or local account.</UserHelpText>
      </ClaimType>
      <ClaimType Id="amr">
        <DisplayName>amr</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Authentication methods requested.</AdminHelpText>
        <UserHelpText>Authentication methods requested.</UserHelpText>
      </ClaimType>
      <ClaimType Id="nux">
        <DisplayName>nux</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="nca">
        <DisplayName>nca</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="prompt">
        <DisplayName>prompt</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="mkt">
        <DisplayName>mkt</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="lc">
        <DisplayName>lc</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="grant_type">
        <DisplayName>grant_type</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="scope">
        <DisplayName>scope</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="client_id">
        <DisplayName>client_id</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Special parameter passed to EvoSTS.</AdminHelpText>
        <UserHelpText>Special parameter passed to EvoSTS.</UserHelpText>
      </ClaimType>
      <ClaimType Id="objectIdFromSession">
        <DisplayName>objectIdFromSession</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Parameter provided by the default session management provider to indicate that the object id has been retrieved from an SSO session.</AdminHelpText>
        <UserHelpText>Parameter provided by the default session management provider to indicate that the object id has been retrieved from an SSO session.</UserHelpText>
      </ClaimType>
      <ClaimType Id="isActiveMFASession">
        <DisplayName>isActiveMFASession</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Parameter provided by the MFA session management to indicate that the user has an active MFA session.</AdminHelpText>
        <UserHelpText>Parameter provided by the MFA session management to indicate that the user has an active MFA session.</UserHelpText>
      </ClaimType>
      <ClaimType Id="localAccountUserCreatedInAAD">
        <DisplayName>localAccountUserCreatedInAAD</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>Internal parameter used for skipping AAD-UserWriteUsingObjectId during local account sign up none-SSO session in sign up or sign in user journey.</AdminHelpText>
        <UserHelpText>Internal parameter used for skipping AAD-UserWriteUsingObjectId during local account sign up none-SSO session in sign up or sign in user journey.</UserHelpText>
      </ClaimType>
      <ClaimType Id="refreshTokenIssuedOnDateTime">
        <DisplayName>refreshTokenIssuedOnDateTime</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Internal parameter used for determine if the user should be permitted to reauthenticate silently via their existing refresh token.</AdminHelpText>
        <UserHelpText>Internal parameter used for determine if the user should be permitted to reauthenticate silently via their existing refresh token.</UserHelpText>
      </ClaimType>
      <ClaimType Id="refreshTokensValidFromDateTime">
        <DisplayName>refreshTokensValidFromDateTime</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>Internal parameter used for determine if the user should be permitted to reauthenticate silently via their existing refresh token.</AdminHelpText>
        <UserHelpText>Internal parameter used for determine if the user should be permitted to reauthenticate silently via their existing refresh token.</UserHelpText>
      </ClaimType>
      <ClaimType Id="legalAgeGroupClassification">
        <DisplayName>Legal Age Group Classification</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The legal age group that a user falls into based on their country and date of birth</AdminHelpText>
        <UserHelpText>The legal age group that a user falls into based on their country and date of birth</UserHelpText>
      </ClaimType>
      <ClaimType Id="consentProvidedForMinor">
        <DisplayName>ConsentProvidedForMinor</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The consent provided for a minor user</AdminHelpText>
        <UserHelpText>The consent provided for a minor user</UserHelpText>
      </ClaimType>
      <ClaimType Id="ageGroup">
        <DisplayName>AgeGroup</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The ageGroup value evaluated from user's date of birth and country of legal residence</AdminHelpText>
        <UserHelpText>The ageGroup value evaluated from user's date of birth and country of legal residence</UserHelpText>
      </ClaimType>
      <ClaimType Id="ageGroup_current">
        <DisplayName>Re-Evaluated AgeGroup</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The ageGroup value re-evaluated from user's date of birth and country of legal residence</AdminHelpText>
        <UserHelpText>The ageGroup value re-evaluated from user's date of birth and country of legal residence</UserHelpText>
      </ClaimType>
      <ClaimType Id="consentProvidedForMinor_current">
        <DisplayName>Re-Evaluated ConsentProvidedForMinor</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The consentProvidedForMinor value re-evaluated from user's date of birth and country of legal residence</AdminHelpText>
        <UserHelpText>The consentProvidedForMinor value re-evaluated from user's date of birth and country of legal residence</UserHelpText>
      </ClaimType>
      <ClaimType Id="cpiminternal_dateOfBirth">
        <DisplayName>Date of Birth</DisplayName>
        <DataType>date</DataType>
        <AdminHelpText>The user's date of birth.</AdminHelpText>
        <UserHelpText>Your date of birth.</UserHelpText>
        <UserInputType>DateTimeDropdown</UserInputType>
        <PredicateValidationReference Id="DefaultDateRange" />
      </ClaimType>
      <ClaimType Id="cpiminternal_legalCountry">
        <DisplayName>Country of Residence</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The country in which the user legally resides.</AdminHelpText>
        <UserHelpText>The country in which you legally reside.</UserHelpText>
        <UserInputType>DropdownSingleSelect</UserInputType>
        <Restriction>
          <!-- The following is the approved ISO short-form Microsoft country list, taken from https://microsoft.sharepoint.com/teams/celaGlobalReadiness/Lists/CountryRegion/CountryRegionList.aspx -->
          <Enumeration Text="Afghanistan" Value="AF" />
          <Enumeration Text="Åland Islands" Value="AX" />
          <Enumeration Text="Albania" Value="AL" />
          <Enumeration Text="Algeria" Value="DZ" />
          <Enumeration Text="American Samoa" Value="AS" />
          <Enumeration Text="Andorra" Value="AD" />
          <Enumeration Text="Angola" Value="AO" />
          <Enumeration Text="Anguilla" Value="AI" />
          <Enumeration Text="Antarctica" Value="AQ" />
          <Enumeration Text="Antigua and Barbuda" Value="AG" />
          <Enumeration Text="Argentina" Value="AR" />
          <Enumeration Text="Armenia" Value="AM" />
          <Enumeration Text="Aruba" Value="AW" />
          <Enumeration Text="Australia" Value="AU" />
          <Enumeration Text="Austria" Value="AT" />
          <Enumeration Text="Azerbaijan" Value="AZ" />
          <Enumeration Text="Bahamas" Value="BS" />
          <Enumeration Text="Bahrain" Value="BH" />
          <Enumeration Text="Bangladesh" Value="BD" />
          <Enumeration Text="Barbados" Value="BB" />
          <Enumeration Text="Belarus" Value="BY" />
          <Enumeration Text="Belgium" Value="BE" />
          <Enumeration Text="Belize" Value="BZ" />
          <Enumeration Text="Benin" Value="BJ" />
          <Enumeration Text="Bermuda" Value="BM" />
          <Enumeration Text="Bhutan" Value="BT" />
          <Enumeration Text="Bolivia" Value="BO" />
          <Enumeration Text="Bonaire" Value="BQ" />
          <Enumeration Text="Bosnia and Herzegovina" Value="BA" />
          <Enumeration Text="Botswana" Value="BW" />
          <Enumeration Text="Bouvet Island" Value="BV" />
          <Enumeration Text="Brazil" Value="BR" />
          <Enumeration Text="British Indian Ocean Territory" Value="IO" />
          <Enumeration Text="British Virgin Islands" Value="VG" />
          <Enumeration Text="Brunei" Value="BN" />
          <Enumeration Text="Bulgaria" Value="BG" />
          <Enumeration Text="Burkina Faso" Value="BF" />
          <Enumeration Text="Burundi" Value="BI" />
          <Enumeration Text="Cabo Verde" Value="CV" />
          <Enumeration Text="Cambodia" Value="KH" />
          <Enumeration Text="Cameroon" Value="CM" />
          <Enumeration Text="Canada" Value="CA" />
          <Enumeration Text="Cayman Islands" Value="KY" />
          <Enumeration Text="Central African Republic" Value="CF" />
          <Enumeration Text="Chad" Value="TD" />
          <Enumeration Text="Chile" Value="CL" />
          <Enumeration Text="China" Value="CN" />
          <Enumeration Text="Christmas Island" Value="CX" />
          <Enumeration Text="Cocos (Keeling) Islands" Value="CC" />
          <Enumeration Text="Colombia" Value="CO" />
          <Enumeration Text="Comoros" Value="KM" />
          <Enumeration Text="Congo" Value="CG" />
          <Enumeration Text="Congo (DRC)" Value="CD" />
          <Enumeration Text="Cook Islands" Value="CK" />
          <Enumeration Text="Costa Rica" Value="CR" />
          <Enumeration Text="Côte d’Ivoire" Value="CI" />
          <Enumeration Text="Croatia" Value="HR" />
          <Enumeration Text="Cuba" Value="CU" />
          <Enumeration Text="Curaçao" Value="CW" />
          <Enumeration Text="Cyprus" Value="CY" />
          <Enumeration Text="Czech Republic" Value="CZ" />
          <Enumeration Text="Denmark" Value="DK" />
          <Enumeration Text="Djibouti" Value="DJ" />
          <Enumeration Text="Dominica" Value="DM" />
          <Enumeration Text="Dominican Republic" Value="DO" />
          <Enumeration Text="Ecuador" Value="EC" />
          <Enumeration Text="Egypt" Value="EG" />
          <Enumeration Text="El Salvador" Value="SV" />
          <Enumeration Text="Equatorial Guinea" Value="GQ" />
          <Enumeration Text="Eritrea" Value="ER" />
          <Enumeration Text="Estonia" Value="EE" />
          <Enumeration Text="Ethiopia" Value="ET" />
          <Enumeration Text="Falkland Islands" Value="FK" />
          <Enumeration Text="Faroe Islands" Value="FO" />
          <Enumeration Text="Fiji" Value="FJ" />
          <Enumeration Text="Finland" Value="FI" />
          <Enumeration Text="France" Value="FR" />
          <Enumeration Text="French Guiana" Value="GF" />
          <Enumeration Text="French Polynesia" Value="PF" />
          <Enumeration Text="French Southern Territories" Value="TF" />
          <Enumeration Text="Gabon" Value="GA" />
          <Enumeration Text="Gambia" Value="GM" />
          <Enumeration Text="Georgia" Value="GE" />
          <Enumeration Text="Germany" Value="DE" />
          <Enumeration Text="Ghana" Value="GH" />
          <Enumeration Text="Gibraltar" Value="GI" />
          <Enumeration Text="Greece" Value="GR" />
          <Enumeration Text="Greenland" Value="GL" />
          <Enumeration Text="Grenada" Value="GD" />
          <Enumeration Text="Guadeloupe" Value="GP" />
          <Enumeration Text="Guam" Value="GU" />
          <Enumeration Text="Guatemala" Value="GT" />
          <Enumeration Text="Guernsey" Value="GG" />
          <Enumeration Text="Guinea" Value="GN" />
          <Enumeration Text="Guinea-Bissau" Value="GW" />
          <Enumeration Text="Guyana" Value="GY" />
          <Enumeration Text="Haiti" Value="HT" />
          <Enumeration Text="Heard Island and McDonald Islands" Value="HM" />
          <Enumeration Text="Honduras" Value="HN" />
          <Enumeration Text="Hong Kong SAR" Value="HK" />
          <Enumeration Text="Hungary" Value="HU" />
          <Enumeration Text="Iceland" Value="IS" />
          <Enumeration Text="India" Value="IN" />
          <Enumeration Text="Indonesia" Value="ID" />
          <Enumeration Text="Iran" Value="IR" />
          <Enumeration Text="Iraq" Value="IQ" />
          <Enumeration Text="Ireland" Value="IE" />
          <Enumeration Text="Isle of Man" Value="IM" />
          <Enumeration Text="Israel" Value="IL" />
          <Enumeration Text="Italy" Value="IT" />
          <Enumeration Text="Jamaica" Value="JM" />
          <Enumeration Text="Jan Mayen" Value="XJ" />
          <Enumeration Text="Japan" Value="JP" />
          <Enumeration Text="Jersey" Value="JE" />
          <Enumeration Text="Jordan" Value="JO" />
          <Enumeration Text="Kazakhstan" Value="KZ" />
          <Enumeration Text="Kenya" Value="KE" />
          <Enumeration Text="Kiribati" Value="KI" />
          <Enumeration Text="Korea" Value="KR" />
          <Enumeration Text="Kosovo" Value="XK" />
          <Enumeration Text="Kuwait" Value="KW" />
          <Enumeration Text="Kyrgyzstan" Value="KG" />
          <Enumeration Text="Laos" Value="LA" />
          <Enumeration Text="Latvia" Value="LV" />
          <Enumeration Text="Lebanon" Value="LB" />
          <Enumeration Text="Lesotho" Value="LS" />
          <Enumeration Text="Liberia" Value="LR" />
          <Enumeration Text="Libya" Value="LY" />
          <Enumeration Text="Liechtenstein" Value="LI" />
          <Enumeration Text="Lithuania" Value="LT" />
          <Enumeration Text="Luxembourg" Value="LU" />
          <Enumeration Text="Macao SAR" Value="MO" />
          <Enumeration Text="Macedonia, FYRO" Value="MK" />
          <Enumeration Text="Madagascar" Value="MG" />
          <Enumeration Text="Malawi" Value="MW" />
          <Enumeration Text="Malaysia" Value="MY" />
          <Enumeration Text="Maldives" Value="MV" />
          <Enumeration Text="Mali" Value="ML" />
          <Enumeration Text="Malta" Value="MT" />
          <Enumeration Text="Marshall Islands" Value="MH" />
          <Enumeration Text="Martinique" Value="MQ" />
          <Enumeration Text="Mauritania" Value="MR" />
          <Enumeration Text="Mauritius" Value="MU" />
          <Enumeration Text="Mayotte" Value="YT" />
          <Enumeration Text="Mexico" Value="MX" />
          <Enumeration Text="Micronesia" Value="FM" />
          <Enumeration Text="Moldova" Value="MD" />
          <Enumeration Text="Monaco" Value="MC" />
          <Enumeration Text="Mongolia" Value="MN" />
          <Enumeration Text="Montenegro" Value="ME" />
          <Enumeration Text="Montserrat" Value="MS" />
          <Enumeration Text="Morocco" Value="MA" />
          <Enumeration Text="Mozambique" Value="MZ" />
          <Enumeration Text="Myanmar" Value="MM" />
          <Enumeration Text="Namibia" Value="NA" />
          <Enumeration Text="Nauru" Value="NR" />
          <Enumeration Text="Nepal" Value="NP" />
          <Enumeration Text="Netherlands" Value="NL" />
          <Enumeration Text="New Caledonia" Value="NC" />
          <Enumeration Text="New Zealand" Value="NZ" />
          <Enumeration Text="Nicaragua" Value="NI" />
          <Enumeration Text="Niger" Value="NE" />
          <Enumeration Text="Nigeria" Value="NG" />
          <Enumeration Text="Niue" Value="NU" />
          <Enumeration Text="Norfolk Island" Value="NF" />
          <Enumeration Text="North Korea" Value="KP" />
          <Enumeration Text="Northern Mariana Islands" Value="MP" />
          <Enumeration Text="Norway" Value="NO" />
          <Enumeration Text="Oman" Value="OM" />
          <Enumeration Text="Pakistan" Value="PK" />
          <Enumeration Text="Palau" Value="PW" />
          <Enumeration Text="Palestinian Authority" Value="PS" />
          <Enumeration Text="Panama" Value="PA" />
          <Enumeration Text="Papua New Guinea" Value="PG" />
          <Enumeration Text="Paraguay" Value="PY" />
          <Enumeration Text="Peru" Value="PE" />
          <Enumeration Text="Philippines" Value="PH" />
          <Enumeration Text="Pitcairn Islands" Value="PN" />
          <Enumeration Text="Poland" Value="PL" />
          <Enumeration Text="Portugal" Value="PT" />
          <Enumeration Text="Puerto Rico" Value="PR" />
          <Enumeration Text="Qatar" Value="QA" />
          <Enumeration Text="Réunion" Value="RE" />
          <Enumeration Text="Romania" Value="RO" />
          <Enumeration Text="Russia" Value="RU" />
          <Enumeration Text="Rwanda" Value="RW" />
          <Enumeration Text="Saba" Value="XS" />
          <Enumeration Text="Saint Barthélemy" Value="BL" />
          <Enumeration Text="Saint Kitts and Nevis" Value="KN" />
          <Enumeration Text="Saint Lucia" Value="LC" />
          <Enumeration Text="Saint Martin" Value="MF" />
          <Enumeration Text="Saint Pierre and Miquelon" Value="PM" />
          <Enumeration Text="Saint Vincent and the Grenadines" Value="VC" />
          <Enumeration Text="Samoa" Value="WS" />
          <Enumeration Text="San Marino" Value="SM" />
          <Enumeration Text="São Tomé and Príncipe" Value="ST" />
          <Enumeration Text="Saudi Arabia" Value="SA" />
          <Enumeration Text="Senegal" Value="SN" />
          <Enumeration Text="Serbia" Value="RS" />
          <Enumeration Text="Seychelles" Value="SC" />
          <Enumeration Text="Sierra Leone" Value="SL" />
          <Enumeration Text="Singapore" Value="SG" />
          <Enumeration Text="Sint Eustatius" Value="XE" />
          <Enumeration Text="Sint Maarten" Value="SX" />
          <Enumeration Text="Slovakia" Value="SK" />
          <Enumeration Text="Slovenia" Value="SI" />
          <Enumeration Text="Solomon Islands" Value="SB" />
          <Enumeration Text="Somalia" Value="SO" />
          <Enumeration Text="South Africa" Value="ZA" />
          <Enumeration Text="South Georgia and the South Sandwich Islands" Value="GS" />
          <Enumeration Text="South Sudan" Value="SS" />
          <Enumeration Text="Spain" Value="ES" />
          <Enumeration Text="Sri Lanka" Value="LK" />
          <Enumeration Text="St Helena, Ascension, Tristan da Cunha" Value="SH" />
          <Enumeration Text="Sudan" Value="SD" />
          <Enumeration Text="Suriname" Value="SR" />
          <Enumeration Text="Svalbard" Value="SJ" />
          <Enumeration Text="Swaziland" Value="SZ" />
          <Enumeration Text="Sweden" Value="SE" />
          <Enumeration Text="Switzerland" Value="CH" />
          <Enumeration Text="Syria" Value="SY" />
          <Enumeration Text="Taiwan" Value="TW" />
          <Enumeration Text="Tajikistan" Value="TJ" />
          <Enumeration Text="Tanzania" Value="TZ" />
          <Enumeration Text="Thailand" Value="TH" />
          <Enumeration Text="Timor-Leste" Value="TL" />
          <Enumeration Text="Togo" Value="TG" />
          <Enumeration Text="Tokelau" Value="TK" />
          <Enumeration Text="Tonga" Value="TO" />
          <Enumeration Text="Trinidad and Tobago" Value="TT" />
          <Enumeration Text="Tunisia" Value="TN" />
          <Enumeration Text="Turkey" Value="TR" />
          <Enumeration Text="Turkmenistan" Value="TM" />
          <Enumeration Text="Turks and Caicos Islands" Value="TC" />
          <Enumeration Text="Tuvalu" Value="TV" />
          <Enumeration Text="U.S. Outlying Islands" Value="UM" />
          <Enumeration Text="U.S. Virgin Islands" Value="VI" />
          <Enumeration Text="Uganda" Value="UG" />
          <Enumeration Text="Ukraine" Value="UA" />
          <Enumeration Text="United Arab Emirates" Value="AE" />
          <Enumeration Text="United Kingdom" Value="GB" />
          <Enumeration Text="United States" Value="US" />
          <Enumeration Text="Uruguay" Value="UY" />
          <Enumeration Text="Uzbekistan" Value="UZ" />
          <Enumeration Text="Vanuatu" Value="VU" />
          <Enumeration Text="Vatican City" Value="VA" />
          <Enumeration Text="Venezuela" Value="VE" />
          <Enumeration Text="Vietnam" Value="VN" />
          <Enumeration Text="Wallis and Futuna" Value="WF" />
          <Enumeration Text="Yemen" Value="YE" />
          <Enumeration Text="Zambia" Value="ZM" />
          <Enumeration Text="Zimbabwe" Value="ZW" />
        </Restriction>
      </ClaimType>
      <ClaimType Id="blockMinorUser">
        <DisplayName>blockMinorUser</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence and should be blocked</AdminHelpText>
        <UserHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence and should be blocked</UserHelpText>
      </ClaimType>
      <ClaimType Id="isMinor">
        <DisplayName>isMinor</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence</AdminHelpText>
        <UserHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence</UserHelpText>
      </ClaimType>
      <ClaimType Id="doRegulationsRequireParentalConsent">
        <DisplayName>Requires Parental Consent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if regulations require parental consent for minors</AdminHelpText>
        <UserHelpText>True, if regulations require parental consent for minors</UserHelpText>
      </ClaimType>
      <ClaimType Id="regulation">
        <DisplayName>Regulation</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>The regulation used by the user's country of legal residence</AdminHelpText>
        <UserHelpText>The regulation used by the user's country of legal residence</UserHelpText>
      </ClaimType>
      <ClaimType Id="response">
        <DisplayName>response</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim responsible for holding response to send to the relying party</AdminHelpText>
        <UserHelpText>A claim responsible for holding response to send to the relying party</UserHelpText>
      </ClaimType>
      <ClaimType Id="responseMsg">
        <DisplayName></DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim responsible for holding response messages to send to the relying party</AdminHelpText>
        <UserHelpText>A claim responsible for holding response messages to send to the relying party</UserHelpText>
        <UserInputType>Paragraph</UserInputType>
        <Restriction>
          <Enumeration Text="B2C_V1_90001" Value="Unfortunately, your sign on has been blocked. Privacy and online safety laws in your country prevent access to accounts belonging to children." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="responsecode">
        <DisplayName>responsecode</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A claim responsible for holding response codes to send to the relying party</AdminHelpText>
        <UserHelpText>A claim responsible for holding response codes to send to the relying party</UserHelpText>
      </ClaimType>
      <ClaimType Id="islegalAgeGroupClassificationUndefined">
        <DisplayName>islegalAgeGroupClassificationUndefined</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if legalAgeGroupClassification value is set as Undefined</AdminHelpText>
        <UserHelpText>islegalAgeGroupClassificationUndefined</UserHelpText>
      </ClaimType>
      <ClaimType Id="isLegalAgeGroupClassificationMinorWithoutConsent">
        <DisplayName>isLegalAgeGroupClassificationMinorWithoutConsent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if legalAgeGroupClassification value is set as MinorWithoutParentalConsent</AdminHelpText>
        <UserHelpText>isLegalAgeGroupClassificationMinorWithoutConsent</UserHelpText>
      </ClaimType>
      <ClaimType Id="isMinorAndRequiresParentalConsent">
        <DisplayName>isMinorAndRequiresParentalConsent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence and should be blocked</AdminHelpText>
        <UserHelpText>True, if the user is considered a minor by the laws and regulations of the user's country of legal residence and should be blocked</UserHelpText>
      </ClaimType>
      <ClaimType Id="shouldBlockMinor">
        <DisplayName>shouldBlockMinor</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if response option selected by Relying Party Admin is to block Minor</AdminHelpText>
        <UserHelpText>True if response option selected by Relying Party Admin is to block Minor</UserHelpText>
      </ClaimType>
      <ClaimType Id="isDoBPresent">
        <DisplayName>isDoBPresent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if cpiminternal_dateOfBirth is present in claimsBag</AdminHelpText>
        <UserHelpText>isLegalAgeGroupClassificationMinorWithoutConsent</UserHelpText>
      </ClaimType>
      <ClaimType Id="isLegalCountryPresent">
        <DisplayName>isLegalCountryPresent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if cpiminternal_legalCountry is present in claimsBag</AdminHelpText>
        <UserHelpText>True if legalCountry value is present in claimsBag</UserHelpText>
      </ClaimType>
      <ClaimType Id="skipProgressiveProfilePage">
        <DisplayName>skipProgressiveProfilePage</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if cpiminternal_dateOfBirth and cpiminternal_legalCountry are present in claimsBag so skip showing ProgressiveProfile page.</AdminHelpText>
        <UserHelpText>True if cpiminternal_dateOfBirth and cpiminternal_legalCountry are present in claimsBag so skip showing ProgressiveProfile page.</UserHelpText>
      </ClaimType>
      <ClaimType Id="ageGroupValueChanged">
        <DisplayName>ageGroupValueChanged</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if re-evaluating ageGroup gives different value then existing ageGroup value.</AdminHelpText>
        <UserHelpText>True if re-evaluating ageGroup gives different value then existing ageGroup value.</UserHelpText>
      </ClaimType>
      <ClaimType Id="consentProvidedForMinorValueChanged">
        <DisplayName>consentProvidedForMinorValueChanged</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if re-evaluating consentProvidedForMinor gives different value then existing consentProvidedForMinor value.</AdminHelpText>
        <UserHelpText>True if re-evaluating consentProvidedForMinor gives different value then existing consentProvidedForMinor value.</UserHelpText>
      </ClaimType>
      <ClaimType Id="ageGatingValuesChanged">
        <DisplayName>ageGatingValuesChanged</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if re-evaluating ageGroup/consentProvidedForMinor gives different value then existing ageGroup/consentProvidedForMinor value.</AdminHelpText>
        <UserHelpText>True if re-evaluating ageGroup/consentProvidedForMinor gives different value then existing ageGroup/consentProvidedForMinor value.</UserHelpText>
      </ClaimType>
      <ClaimType Id="ignoreConsent">
        <DisplayName>ignoreConsent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if parental consent provided for a minor should be ignored.</AdminHelpText>
        <UserHelpText>True if parental consent provided for a minor should be ignored.</UserHelpText>
      </ClaimType>
      <ClaimType Id="isMinorAndIgnoreConsent">
        <DisplayName>isMinorAndIgnoreConsent</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if a user is minor and consentProvidedForMinor is ignored.</AdminHelpText>
        <UserHelpText>True if a user is minor and consentProvidedForMinor is ignored.</UserHelpText>
      </ClaimType>
      <ClaimType Id="isMinorNeedToBeBlocked">
        <DisplayName>isMinorNeedToBeBlocked</DisplayName>
        <DataType>boolean</DataType>
        <AdminHelpText>True if a user is supposed to be blocked.</AdminHelpText>
        <UserHelpText>True if a user is supposed to be blocked.</UserHelpText>
      </ClaimType>
      <ClaimType Id="ui_locales">
        <DisplayName>ui_locales</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A policy claim for use as an input claim of an OIDC technical profile to send the ui_locales parameter to the external OIDC provider</AdminHelpText>
        <UserHelpText>A policy claim for use as an input claim of an OIDC technical profile to send the ui_locales parameter to the external OIDC provider</UserHelpText>
      </ClaimType>
      <ClaimType Id="nullStringClaim">
        <DisplayName>nullClaim</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText>A policy claim to store unuseful output values from ClaimsTransformations. This claim should not be used in a TechnicalProfiles.</AdminHelpText>
        <UserHelpText>A policy claim to store unuseful output values from ClaimsTransformations. This claim should not be used in a TechnicalProfiles.</UserHelpText>
      </ClaimType>
    </ClaimsSchema>
    <Predicates>
      <Predicate Id="IsLengthBetween8And64" Method="IsLengthRange">
        <UserHelpText>The password must be between 8 and 64 characters.</UserHelpText>
        <Parameters>
          <Parameter Id="Minimum">8</Parameter>
          <Parameter Id="Maximum">64</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="Lowercase" Method="IncludesCharacters">
        <UserHelpText>a lowercase letter</UserHelpText>
        <Parameters>
          <Parameter Id="CharacterSet">a-z</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="Uppercase" Method="IncludesCharacters">
        <UserHelpText>an uppercase letter</UserHelpText>
        <Parameters>
          <Parameter Id="CharacterSet">A-Z</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="Number" Method="IncludesCharacters">
        <UserHelpText>a digit</UserHelpText>
        <Parameters>
          <Parameter Id="CharacterSet">0-9</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="Symbol" Method="IncludesCharacters">
        <UserHelpText>a symbol</UserHelpText>
        <Parameters>
          <Parameter Id="CharacterSet">@#$%^&amp;*\-_+=[]{}|\\:',.?/`~"();!</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="PIN" Method="MatchesRegex">
        <UserHelpText>The password must be numbers only.</UserHelpText>
        <Parameters>
          <Parameter Id="RegularExpression">^[0-9]+$</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="AllowedAADCharacters" Method="MatchesRegex">
        <UserHelpText>An invalid character was provided.</UserHelpText>
        <!--
            We will allow following cases to pass the regular expression(Please test it in browser console if necessary):
            From left to right separated by "|":
            1. One or more characters listed in the first set including the white space.
            2. Dots as long as it is not followed by character "@". 
            3. Empty string. 
            Note: "(^$)" will prevent the error message from showing up when input box is empty, and the length predicate
            will serve the coverage during the time.
          -->
        <Parameters>
          <Parameter Id="RegularExpression">(^([0-9A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~"();! ]|(\.(?!@)))+$)|(^$)</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="DisallowedWhitespace" Method="MatchesRegex">
        <UserHelpText>The password must not begin or end with a whitespace character.</UserHelpText>
        <Parameters>
          <!--
            We will allow following cases to pass the regular expression(Please test it in browser console if necessary):
            From left to right separated by "|":
            1. Zero or more characters with start or end characters as non white space characters.
            2. Non white space Characters.
            3. Empty string.
            Note: "(^$)" will prevent the error message from showing up when input box is empty, and the length predicate
            will serve the coverage during the time.
          -->
          <Parameter Id="RegularExpression">(^\S.*\S$)|(^\S+$)|(^$)</Parameter>
        </Parameters>
      </Predicate>
      <Predicate Id="DateRangeBetween1905AndToday" Method="IsDateRange" HelpText="The date must be between 01-01-1905 and today.">
        <Parameters>
          <Parameter Id="Minimum">1905-01-01</Parameter>
          <Parameter Id="Maximum">Today</Parameter>
        </Parameters>
      </Predicate>
    </Predicates>
    <PredicateValidations>
      <PredicateValidation Id="SimplePassword">
        <PredicateGroups>
          <PredicateGroup Id="DisallowedWhitespaceGroup">
            <PredicateReferences>
              <PredicateReference Id="DisallowedWhitespace" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="AllowedAADCharactersGroup">
            <PredicateReferences>
              <PredicateReference Id="AllowedAADCharacters" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="LengthGroup">
            <PredicateReferences>
              <PredicateReference Id="IsLengthBetween8And64" />
            </PredicateReferences>
          </PredicateGroup>
        </PredicateGroups>
      </PredicateValidation>
      <PredicateValidation Id="StrongPassword">
        <PredicateGroups>
          <PredicateGroup Id="DisallowedWhitespaceGroup">
            <PredicateReferences>
              <PredicateReference Id="DisallowedWhitespace" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="AllowedAADCharactersGroup">
            <PredicateReferences>
              <PredicateReference Id="AllowedAADCharacters" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="LengthGroup">
            <PredicateReferences>
              <PredicateReference Id="IsLengthBetween8And64" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="CharacterClasses">
            <UserHelpText>The password must have at least 3 of the following:</UserHelpText>
            <PredicateReferences MatchAtLeast="3">
              <PredicateReference Id="Lowercase" />
              <PredicateReference Id="Uppercase" />
              <PredicateReference Id="Number" />
              <PredicateReference Id="Symbol" />
            </PredicateReferences>
          </PredicateGroup>
        </PredicateGroups>
      </PredicateValidation>
      <PredicateValidation Id="CustomPassword">
        <PredicateGroups>
          <PredicateGroup Id="DisallowedWhitespaceGroup">
            <PredicateReferences>
              <PredicateReference Id="DisallowedWhitespace" />
            </PredicateReferences>
          </PredicateGroup>
          <PredicateGroup Id="AllowedAADCharactersGroup">
            <PredicateReferences>
              <PredicateReference Id="AllowedAADCharacters" />
            </PredicateReferences>
          </PredicateGroup>
        </PredicateGroups>
      </PredicateValidation>
      <PredicateValidation Id="DefaultDateRange">
        <PredicateGroups>
          <PredicateGroup Id="DateRangeGroup">
            <PredicateReferences>
              <PredicateReference Id="DateRangeBetween1905AndToday" />
            </PredicateReferences>
          </PredicateGroup>
        </PredicateGroups>
      </PredicateValidation>
    </PredicateValidations>
    <ClaimsTransformations>
      <ClaimsTransformation Id="CreateEmailsFromOtherMailsAndSignInNamesInfo" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="AddStrongAuthenticationEmailToEmails" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="emails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateOtherMailsFromEmail" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateEmailFromOtherMails" TransformationMethod="GetSingleItemFromStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="extractedItem" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateRandomUPNUserName" TransformationMethod="CreateRandomString">
        <InputParameters>
          <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="upnUserName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateUserPrincipalName" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="upnUserName" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="cpim_{0}@{RelyingPartyTenantId}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="userPrincipalName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateSubjectClaimFromObjectID" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateSubjectClaimFromAlternativeSecurityId" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateAlternativeSecurityId" TransformationMethod="CreateAlternativeSecurityId">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userId" TransformationClaimType="key" />
          <InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="identityProvider" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="alternativeSecurityId" TransformationClaimType="alternativeSecurityId" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateDisplayNameFromFirstNameAndLastName" TransformationMethod="FormatStringMultipleClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="surName" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0} {1}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="displayName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="AssertEmailAndStrongAuthenticationEmailAddressAreEqual" TransformationMethod="AssertStringClaimsAreEqual">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
        </InputParameters>
      </ClaimsTransformation>
      <ClaimsTransformation Id="AssertAccountEnabledIsTrue" TransformationMethod="AssertBooleanClaimIsEqualToValue">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="accountEnabled" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="valueToCompareTo" DataType="boolean" Value="true" />
        </InputParameters>
      </ClaimsTransformation>
      <ClaimsTransformation Id="AssertRefreshTokenIssuedLaterThanValidFromDate" TransformationMethod="AssertDateTimeIsGreaterThan">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="refreshTokenIssuedOnDateTime" TransformationClaimType="leftOperand" />
          <InputClaim ClaimTypeReferenceId="refreshTokensValidFromDateTime" TransformationClaimType="rightOperand" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="AssertIfEqualTo" DataType="boolean" Value="false" />
          <InputParameter Id="AssertIfRightOperandIsNotPresent" DataType="boolean" Value="true" />
          <InputParameter Id="TreatAsEqualIfWithinMillseconds" DataType="int" Value="300000" />
        </InputParameters>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CreateUserId" TransformationMethod="ConvertNumberToStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="numericUserId" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="UserId" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="IsUserMinorAndRequireParentalConsent" TransformationMethod="AndClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isMinor" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="doRegulationsRequireParentalConsent" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isMinorAndRequiresParentalConsent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetIsUserMinorAndIgnoreConsent" TransformationMethod="AndClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isMinor" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="ignoreConsent" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isMinorAndIgnoreConsent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetIsMinorNeedToBeBlocked" TransformationMethod="OrClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isMinorAndRequiresParentalConsent" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="isMinorAndIgnoreConsent" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isMinorNeedToBeBlocked" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetBlockMinorUserUsingResponseOption" TransformationMethod="AndClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isMinorNeedToBeBlocked" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="shouldBlockMinor" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="blockMinorUser" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CalculateAgeGroupAndConsent" TransformationMethod="GetAgeGroupConsentProvidedAndRequiresConsent">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="cpiminternal_dateOfBirth" TransformationClaimType="dateOfBirth" />
          <InputClaim ClaimTypeReferenceId="cpiminternal_legalCountry" TransformationClaimType="countryCode" />
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinor" TransformationClaimType="consentProvidedForMinor" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ageGroup" TransformationClaimType="ageGroup" />
          <OutputClaim ClaimTypeReferenceId="doRegulationsRequireParentalConsent" TransformationClaimType="requiresParentalConsent" />
          <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" TransformationClaimType="consentProvidedForMinor" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="ReEvaluateAgeGroupAndConsent" TransformationMethod="GetAgeGroupConsentProvidedAndRequiresConsent">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="cpiminternal_dateOfBirth" TransformationClaimType="dateOfBirth" />
          <InputClaim ClaimTypeReferenceId="cpiminternal_legalCountry" TransformationClaimType="countryCode" />
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinor" TransformationClaimType="consentProvidedForMinor" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ageGroup_current" TransformationClaimType="ageGroup" />
          <OutputClaim ClaimTypeReferenceId="doRegulationsRequireParentalConsent" TransformationClaimType="requiresParentalConsent" />
          <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor_current" TransformationClaimType="consentProvidedForMinor" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetIsMinor" TransformationMethod="SetClaimsIfStringsMatch">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="ageGroup" TransformationClaimType="claimToMatch" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="matchTo" DataType="string" Value="Minor" />
          <InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
          <InputParameter Id="outputClaimIfMatched" DataType="string" Value="B2C_V1_90001" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="responseCode" TransformationClaimType="outputClaim" />
          <OutputClaim ClaimTypeReferenceId="isMinor" TransformationClaimType="stringCompareResultClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="GetResponseMsgMappedToResponseCode" TransformationMethod="GetMappedValueFromLocalizedCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="responseCode" TransformationClaimType="mapFromClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="responseMsg" TransformationClaimType="restrictionValueClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="MergeResponseMsgAndCode" TransformationMethod="FormatStringMultipleClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="responseCode" TransformationClaimType="inputClaim1"/>
          <InputClaim ClaimTypeReferenceId="responseMsg" TransformationClaimType="inputClaim2"/>
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}%3A {1}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="response" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CalculateIsUserMinorAndRequireParentalConsent" TransformationMethod="OrClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="islegalAgeGroupClassificationUndefined" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="isLegalAgeGroupClassificationMinorWithoutConsent" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isMinorAndRequiresParentalConsent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetIsLegalAgeGroupClassificationUndefined" TransformationMethod="SetClaimsIfStringsMatch">
        <InputClaims>
          <!-- legalAgeGroupClassification is readonly claim  and gets set only by AAD based on ageGroup value. 
					So we are writing ageGroup value in AADWrite call. This internally sets legalAgeGroupClassification -->
          <InputClaim ClaimTypeReferenceId="legalAgeGroupClassification" TransformationClaimType="claimToMatch" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="matchTo" DataType="string" Value="undefined" />
          <InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
          <InputParameter Id="outputClaimIfMatched" DataType="string" Value="B2C_V1_90001" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="responseCode" TransformationClaimType="outputClaim" />
          <OutputClaim ClaimTypeReferenceId="islegalAgeGroupClassificationUndefined" TransformationClaimType="stringCompareResultClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="SetIsLegalAgeGroupClassificationMinorWithoutConsent" TransformationMethod="SetClaimsIfStringsMatch">
        <InputClaims>
          <!-- legalAgeGroupClassification is readonly claim  and gets set only by AAD based on ageGroup value. 
					So we are writing ageGroup value in AADWrite call. This internally sets legalAgeGroupClassification -->
          <InputClaim ClaimTypeReferenceId="legalAgeGroupClassification" TransformationClaimType="claimToMatch" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="matchTo" DataType="string" Value="minorWithoutParentalConsent" />
          <InputParameter Id="stringComparison" DataType="string" Value="ordinalIgnoreCase" />
          <InputParameter Id="outputClaimIfMatched" DataType="string" Value="B2C_V1_90001" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="responseCode" TransformationClaimType="outputClaim" />
          <OutputClaim ClaimTypeReferenceId="isLegalAgeGroupClassificationMinorWithoutConsent" TransformationClaimType="stringCompareResultClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="IsDateOfBirthPresent" TransformationMethod="DoesClaimExist">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="cpiminternal_dateOfBirth" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isDoBPresent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="IsLegalCountryPresent" TransformationMethod="DoesClaimExist">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="cpiminternal_legalCountry" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="isLegalCountryPresent" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="EvaluateSkipProgressiveProfilePage" TransformationMethod="AndClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="isDoBPresent" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="isLegalCountryPresent" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="skipProgressiveProfilePage" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="HasAgeGroupValueChanged" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="ageGroup" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="ageGroup_current" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="NOT EQUAL" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ageGroupValueChanged" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="HasConsentProvidedForMinorValueChanged" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinor" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinor_current" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="NOT EQUAL" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="consentProvidedForMinorValueChanged" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="EvaluateAgeGatingValuesChanged" TransformationMethod="OrClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="ageGroupValueChanged" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinorValueChanged" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ageGatingValuesChanged" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="UpdateAgeGroup" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="ageGroup_current" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="ageGroup" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="UpdateConsentProvidedForMinor" TransformationMethod="CopyClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="consentProvidedForMinor_current" TransformationClaimType="inputClaim" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="ExtractGivenNameFromLinkedInResponse" TransformationMethod="GetSingleItemFromJson">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="inputJson" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="nullStringClaim" TransformationClaimType="key" />
          <OutputClaim ClaimTypeReferenceId="givenName" TransformationClaimType="value" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="ExtractSurNameFromLinkedInResponse" TransformationMethod="GetSingleItemFromJson">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="surname" TransformationClaimType="inputJson" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="nullStringClaim" TransformationClaimType="key" />
          <OutputClaim ClaimTypeReferenceId="surname" TransformationClaimType="value" />
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>
    <ClientDefinitions>
      <ClientDefinition Id="DefaultWeb">
        <ClientUIFilterFlags>LineMarkers, MetaRefresh</ClientUIFilterFlags>
      </ClientDefinition>
    </ClientDefinitions>
    <!--
      This policy has custom page branding, so override just the LoadUri (other components stay the same from the base definition)
    -->
    <ContentDefinitions>
      <ContentDefinition Id="api.error">
        <LoadUri>~/tenant/default/exception.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:globalexception:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Error page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.idpselections">
        <LoadUri>~/tenant/default/idpSelector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Idp selection page</Item>
          <Item Key="language.intro">Sign in</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.idpselections.signup">
        <LoadUri>~/tenant/default/idpSelector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Idp selection page</Item>
          <Item Key="language.intro">Sign up</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signinandsignup">
        <LoadUri>~/tenant/default/unified.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssd:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Signin and Signup</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signin.profileupdate">
        <LoadUri>~/tenant/default/signinProfileUpdate.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssp:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Sign in</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signinandsignupwithpassword">
        <LoadUri>~/tenant/default/unified.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssp:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Signin and Signup</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.signinwithpassword">
        <LoadUri>~/tenant/default/signin.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssp:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Signin</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.phonefactor">
        <LoadUri>~/tenant/default/phoneFactor.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:multifactor:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Multi-factor authentication page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.phonefactor1.1">
        <LoadUri>~/tenant/default/multifactor-1.0.0.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:multifactor:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Multi-factor authentication page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted1.1">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted.profileupdate">
        <LoadUri>~/tenant/default/updateProfile.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted.blockminor">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Show blocking page for minors</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.selfasserted.progressiveprofile">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Collect information from user page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountsignup">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account sign up page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountsignup1.1">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account sign up page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountsignin">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account sign in page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountpasswordchange">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account change password page</Item>
        </Metadata>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccountpasswordchange1.1">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local account change password page</Item>
        </Metadata>
      </ContentDefinition>
    </ContentDefinitions>
    <Localization Enabled="false">
      <SupportedLanguages PolicyLanguage="en" DefaultLanguage="en">
        <SupportedLanguage>en</SupportedLanguage>
      </SupportedLanguages>
    </Localization>
  </BuildingBlocks>
  <!--
        A list of all the claim providers that can be used in the technical policies. If a claims provider is not listed
        in this section, then it cannot be used in a technical policy.
    -->
  <ClaimsProviders>
    <ClaimsProvider>
      <Domain>live.com</Domain>
      <DisplayName>Microsoft Account</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="MSA-OIDC">
          <DisplayName>Microsoft Account</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="ProviderName">https://login.live.com</Item>
            <Item Key="METADATA">https://login.live.com/.well-known/openid-configuration</Item>
            <Item Key="response_types">code</Item>
            <Item Key="response_mode">form_post</Item>
            <Item Key="scope">openid profile email</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="MarkAsFailureOnStatusCode5xx">true</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="live.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="sub" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="email" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
          <ErrorHandlers>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <!-- {"error":"invalid_client","error_description":"The provided value for the 'client_secret' parameter is not valid."} -->
              <ResponseMatch>$[?(@.error == 'invalid_client')]</ResponseMatch>
              <Action>InvalidClient</Action>
            </ErrorHandler>
          </ErrorHandlers>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>twitter.com</Domain>
      <DisplayName>Twitter</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Twitter-OAUTH1">
          <DisplayName>Twitter</DisplayName>
          <Protocol Name="OAuth1" />
          <Metadata>
            <Item Key="ProviderName">Twitter</Item>
            <Item Key="authorization_endpoint">https://api.twitter.com/oauth/authenticate</Item>
            <Item Key="access_token_endpoint">https://api.twitter.com/oauth/access_token</Item>
            <Item Key="request_token_endpoint">https://api.twitter.com/oauth/request_token</Item>
            <Item Key="ClaimsEndpoint">https://api.twitter.com/1.1/account/verify_credentials.json?include_email=true</Item>
            <Item Key="ClaimsResponseFormat">json</Item>
            <Item Key="external_user_identity_claim_id">user_id</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="user_id" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="screen_name" />
            <OutputClaim ClaimTypeReferenceId="email" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="twitter.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>facebook.com</Domain>
      <DisplayName>Facebook</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Facebook-OAUTH">
          <DisplayName>Facebook</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">facebook</Item>
            <Item Key="authorization_endpoint">https://www.facebook.com/dialog/oauth</Item>
            <Item Key="AccessTokenEndpoint">https://graph.facebook.com/oauth/access_token</Item>
            <Item Key="ClaimsEndpoint">https://graph.facebook.com/me?fields=id,first_name,last_name,name,email</Item>
            <Item Key="scope">email</Item>
            <Item Key="HttpBinding">GET</Item>
            <!-- The Facebook required HTTP GET method, but the access token response is in JSON format from 3/27/2017 -->
            <Item Key="AccessTokenResponseFormat">json</Item>
            <Item Key="external_user_identity_claim_id">id</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="first_name" />
            <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="last_name" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="facebook.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
          <ErrorHandlers>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <ResponseMatch>$[?(@.error.code == 100)]</ResponseMatch>
              <Action>Reauthenticate</Action>
              <!--In case of authroziation code used error, we don't want the user to enter his credential again.-->
              <!--AdditionalRequestParameters Key="auth_type">reauthenticate</AdditionalRequestParameters-->
            </ErrorHandler>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <!-- {"error":{"message":"Error validating client secret.","type":"OAuthException","code":1,"fbtrace_id":"FFeXWqReK4i"}} -->
              <ResponseMatch>$[?(@.error.code == 1)]</ResponseMatch>
              <Action>InvalidClient</Action>
            </ErrorHandler>
          </ErrorHandlers>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>google.com</Domain>
      <DisplayName>Google</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Google-OAUTH">
          <DisplayName>Google</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">google</Item>
            <Item Key="authorization_endpoint">https://accounts.google.com/o/oauth2/auth</Item>
            <Item Key="AccessTokenEndpoint">https://accounts.google.com/o/oauth2/token</Item>
            <Item Key="ClaimsEndpoint">https://www.googleapis.com/oauth2/v1/userinfo</Item>
            <Item Key="scope">email profile</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="external_user_identity_claim_id">id</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="google.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
          <ErrorHandlers>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <ResponseMatch>$[?(@.error == 'invalid_grant')]</ResponseMatch>
              <Action>Reauthenticate</Action>
              <!--In case of authroziation code used error, we don't want the user to select his account again.-->
              <!--AdditionalRequestParameters Key="prompt">select_account</AdditionalRequestParameters-->
            </ErrorHandler>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <!-- {"error":"invalid_client"} -->
              <ResponseMatch>$[?(@.error == 'invalid_client')]</ResponseMatch>
              <Action>InvalidClient</Action>
            </ErrorHandler>
          </ErrorHandlers>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>amazon.com</Domain>
      <DisplayName>Amazon</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Amazon-OAUTH">
          <DisplayName>Amazon</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">amazon</Item>
            <Item Key="authorization_endpoint">https://www.amazon.com/ap/oa</Item>
            <Item Key="AccessTokenEndpoint">https://api.amazon.com/auth/o2/token</Item>
            <Item Key="ClaimsEndpoint">https://api.amazon.com/user/profile</Item>
            <Item Key="scope">profile</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="external_user_identity_claim_id">user_id</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="user_id" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="amazon.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
          <ErrorHandlers>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <!-- {"error_description":"Client authentication failed","error":"invalid_client"} -->
              <ResponseMatch>$[?(@.error == 'invalid_client')]</ResponseMatch>
              <Action>InvalidClient</Action>
            </ErrorHandler>
          </ErrorHandlers>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>linkedin.com</Domain>
      <DisplayName>LinkedIn</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="LinkedIn-OAUTH">
          <DisplayName>LinkedIn</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">linkedin</Item>
            <Item Key="authorization_endpoint">https://www.linkedin.com/oauth/v2/authorization</Item>
            <Item Key="AccessTokenEndpoint">https://www.linkedin.com/oauth/v2/accessToken</Item>
            <Item Key="ClaimsEndpoint">https://api.linkedin.com/v2/me</Item>
            <Item Key="scope">r_emailaddress r_liteprofile</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="external_user_identity_claim_id">id</Item>
            <Item Key="BearerTokenTransmissionMethod">AuthorizationHeader</Item>
            <Item Key="ResolveJsonPathsInJsonTokens">true</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="firstName.localized" />
            <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="lastName.localized" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="linkedin.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="ExtractGivenNameFromLinkedInResponse" />
            <OutputClaimsTransformation ReferenceId="ExtractSurNameFromLinkedInResponse" />
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateDisplayNameFromFirstNameAndLastName" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
          <ErrorHandlers>
            <ErrorHandler>
              <ErrorResponseFormat>json</ErrorResponseFormat>
              <!-- {"error":"invalid_client","error_description":"Client authentication failed"} -->
              <ResponseMatch>$[?(@.error == 'invalid_client')]</ResponseMatch>
              <Action>InvalidClient</Action>
            </ErrorHandler>
          </ErrorHandlers>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>weibo.com</Domain>
      <DisplayName>Weibo (Preview)</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Weibo-OAUTH">
          <DisplayName>Weibo</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">weibo</Item>
            <Item Key="authorization_endpoint">https://api.weibo.com/oauth2/authorize</Item>
            <Item Key="AccessTokenEndpoint">https://api.weibo.com/oauth2/access_token</Item>
            <Item Key="ClaimsEndpoint">https://api.weibo.com/2/account/get_uid.json</Item>
            <Item Key="scope">email</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="external_user_identity_claim_id">uid</Item>
            <!-- Error response specification from Weibo: http://open.weibo.com/wiki/Error_code -->
            <!-- The status code of error response from Weibo isn't 200, needn't to validate it manually.-->
            <!-- The error response from Weibo doesn't contain any PII data. -->
            <!--<Item Key="ResponseErrorCodeParamName">error_code</Item>-->
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <!-- The uid claim from Weibo response is a 64bit integer value. -->
            <OutputClaim ClaimTypeReferenceId="numericUserId" PartnerClaimType="uid" />
            <!-- The Weibo response doesn't contain UserName/EmailAddress.-->
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="weibo.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" DefaultValue="Weibo User" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
            <!-- The Weibo UserId is a global unique id for each Weibo account. e.g. the uid is 5915437266 and we could access a weibo account via http://weibo.com/u/5915437266 -->
            <OutputClaim ClaimTypeReferenceId="UserId" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateUserId" />
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>qq.com</Domain>
      <DisplayName>QQ (Preview)</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="QQ-OAUTH">
          <DisplayName>QQ</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">qq</Item>
            <Item Key="authorization_endpoint">https://graph.qq.com/oauth2.0/authorize</Item>
            <Item Key="AccessTokenEndpoint">https://graph.qq.com/oauth2.0/token</Item>
            <Item Key="ClaimsEndpoint">https://graph.qq.com/oauth2.0/me</Item>
            <Item Key="scope">get_user_info</Item>
            <Item Key="HttpBinding">GET</Item>
            <!-- The claims response format of QQ is likely in JsonP format, e.g. callback( {"client_id":"YOUR_APPID","openid":"YOUR_OPENID"} ); -->
            <!-- The callback function name for JsonP should be always 'callback' but no official instruction from http://wiki.open.qq.com/wiki/website/%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7OpenID_OAuth2.0. -->
            <Item Key="ClaimsResponseFormat">JsonP</Item>
            <!-- Error response specification from QQ: http://wiki.open.qq.com/wiki/website/%E5%85%AC%E5%85%B1%E8%BF%94%E5%9B%9E%E7%A0%81%E8%AF%B4%E6%98%8E#100000-100031.EF.BC.9APC.E7.BD.91.E7.AB.99.E6.8E.A5.E5.85.A5.E6.97.B6.E7.9A.84.E5.85.AC.E5.85.B1.E8.BF.94.E5.9B.9E.E7.A0.81 -->
            <!-- The status code of error response from QQ is 200, so the response reader need to manually validate the deserilized response contents. -->
            <!-- The error response from QQ doesn't contain any PII data. -->
            <Item Key="ResponseErrorCodeParamName">error</Item>
            <Item Key="external_user_identity_claim_id">openid</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <!-- The openid claim is the user id in QQ claims response, this value will be shared in all applications of the same developer account.-->
            <OutputClaim ClaimTypeReferenceId="UserId" PartnerClaimType="openid" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="qq.com" AlwaysUseDefaultValue="true" />
            <!-- The QQ response doesn't contain UserName/EmailAddress.-->
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>wechat.com</Domain>
      <DisplayName>WeChat (Preview)</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="WeChat-OAUTH">
          <DisplayName>WeChat</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">wechat</Item>
            <!-- The WeChat only support QRCode scanning based login. -->
            <Item Key="authorization_endpoint">https://open.weixin.qq.com/connect/qrconnect</Item>
            <Item Key="AccessTokenEndpoint">https://api.weixin.qq.com/sns/oauth2/access_token</Item>
            <Item Key="ClaimsEndpoint">https://api.weixin.qq.com/sns/userinfo</Item>
            <Item Key="scope">snsapi_login</Item>
            <Item Key="HttpBinding">GET</Item>
            <!-- The WeChat required HTTP GET method, but the access token response is in JSON format. -->
            <Item Key="AccessTokenResponseFormat">json</Item>
            <!-- The request url for WeChat will use appid/secret instead of client_id/client_secret. -->
            <Item Key="ClientIdParamName">appid</Item>
            <Item Key="ClientSecretParamName">secret</Item>
            <!-- The response from AccessTokenEndpoint of WeChat contains an extra parameter 'openid', which is mandatory parameter besides the access_token in ClaimsEndpoint request query string.-->
            <!-- The specification of Wechat: https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419316505&token=&lang=zh_CN -->
            <Item Key="ExtraParamsInAccessTokenEndpointResponse">openid</Item>
            <Item Key="ExtraParamsInClaimsEndpointRequest">openid</Item>
            <!-- Error response specification from WeChat: https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&t=resource/res_list&verify=1&id=open1419318634&token=&lang=zh_CN -->
            <!-- The status code of error response from WeChat is 200, so the response reader need to manually validate the deserilized response contents. -->
            <!-- The error response from WeChat doesn't contain any PII data. -->
            <Item Key="ResponseErrorCodeParamName">errcode</Item>
            <Item Key="external_user_identity_claim_id">unionid</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <!-- The unionid claim is the user id in WeChat claims response, this value will be same in all applications of the same wechat developer account.-->
            <OutputClaim ClaimTypeReferenceId="UserId" PartnerClaimType="unionid" />
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="wechat.com" AlwaysUseDefaultValue="true" />
            <!-- The WeChat response doesn't contain UserName/EmailAddress.-->
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <Domain>github.com</Domain>
      <DisplayName>GitHub (Preview)</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="GitHub-OAUTH2">
          <DisplayName>GitHub</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">github</Item>
            <Item Key="authorization_endpoint">https://github.com/login/oauth/authorize</Item>
            <Item Key="AccessTokenEndpoint">https://github.com/login/oauth/access_token</Item>
            <Item Key="ClaimsEndpoint">https://api.github.com/user</Item>
            <Item Key="scope">read:user user:email</Item>
            <Item Key="HttpBinding">GET</Item>
            <Item Key="UserAgentForClaimsExchange">CPIM-Basic/{tenant}/{policy}</Item>
            <Item Key="PreserveEmptyAndNullClaims">false</Item>
            <Item Key="external_user_identity_claim_id">id</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="github.com" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialIdpAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="login" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="numericUserId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="UserId" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateUserId" />
            <OutputClaimsTransformation ReferenceId="CreateRandomUPNUserName" />
            <OutputClaimsTransformation ReferenceId="CreateUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromAlternativeSecurityId" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Local Account SignIn</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="LocalAccountSignInWithEvoStsUsingLogonName">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="UserId" PartnerClaimType="login_hint" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="LocalAccountSignInWithEvoSts" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignInWithEvoStsUsingLogonEmail">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="login_hint" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="LocalAccountSignInWithEvoSts" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignInWithEvoSts">
          <DisplayName>Local Account SignIn</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/authorize</Item>
            <Item Key="ReauthenticateUserOnSessionExpiry">true</Item>
            <!-- First party App client Id-->
            <Item Key="client_id">e43bdc54-41fc-4ef8-96b9-37bf639716d0</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="login_hint" DefaultValue="{OIDC:LoginHint}" />
            <InputClaim ClaimTypeReferenceId="nux" PartnerClaimType="nux" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="domain_hint" DefaultValue="{Policy:RelyingPartyTenantId}" />
            <InputClaim ClaimTypeReferenceId="prompt" PartnerClaimType="prompt" DefaultValue="{OIDC:prompt}" />
            <InputClaim ClaimTypeReferenceId="mkt" PartnerClaimType="mkt" DefaultValue="{Culture:RFC5646}" />
            <InputClaim ClaimTypeReferenceId="lc" PartnerClaimType="lc" DefaultValue="{Culture:LCID}" />
            <InputClaim ClaimTypeReferenceId="ncaslice" PartnerClaimType="slice" DefaultValue="{OAUTH-KV:ncaslice}" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="eSTS-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignInWithROPC">
          <DisplayName>Local Account SignIn</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
            <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
            <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>
            <Item Key="ProviderName">https://sts.windows.net/</Item>
            <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
            <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
            <Item Key="response_types">id_token</Item>
            <Item Key="response_mode">query</Item>
            <Item Key="scope">email openid</Item>
            <!-- First party App client Id-->
            <Item Key="client_id">f1bed3f6-d571-4627-a53e-78a65f2d50ca</Item>
            <Item Key="IdTokenAudience">e43bdc54-41fc-4ef8-96b9-37bf639716d0</Item>

            <Item Key="UsePolicyInRedirectUri">false</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="MarkAsFailureOnStatusCode5xx">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="username" Required="true" DefaultValue="{OIDC:Username}" />
            <InputClaim ClaimTypeReferenceId="password" Required="true" DefaultValue="{OIDC:Password}" />
            <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
            <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
            <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="f1bed3f6-d571-4627-a53e-78a65f2d50ca" />
            <InputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="resource" DefaultValue="e43bdc54-41fc-4ef8-96b9-37bf639716d0" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="LocalAccount" />
            <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="newUser" DefaultValue="false" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="eSTS-NonInteractive">
          <DisplayName>Local Account SignIn</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
            <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
            <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="username" Required="true" />
            <InputClaim ClaimTypeReferenceId="password" Required="true" />
            <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
            <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
            <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="f1bed3f6-d571-4627-a53e-78a65f2d50ca" />
            <InputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="resource" DefaultValue="e43bdc54-41fc-4ef8-96b9-37bf639716d0" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="eSTS-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="eSTS-Common">
          <DisplayName>Local Account SignIn</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="ProviderName">https://sts.windows.net/</Item>
            <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
            <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
            <Item Key="response_types">id_token</Item>
            <Item Key="response_mode">query</Item>
            <Item Key="scope">email openid</Item>
            <!-- First party App client Id-->
            <Item Key="client_id">f1bed3f6-d571-4627-a53e-78a65f2d50ca</Item>
            <Item Key="IdTokenAudience">e43bdc54-41fc-4ef8-96b9-37bf639716d0</Item>
            <Item Key="UsePolicyInRedirectUri">false</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="MarkAsFailureOnStatusCode5xx">true</Item>
          </Metadata>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surName" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>PhoneFactor</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="PhoneFactor-Verify">
          <DisplayName>PhoneFactor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA" />
        </TechnicalProfile>
        <TechnicalProfile Id="PhoneFactor-Input">
          <DisplayName>PhoneFactor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" DefaultValue="true" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA" />
        </TechnicalProfile>
        <!-- This profile is created and included by PhoneFactor-*-V2 profiles so it can be overridden in the tenant policies.
          This keeps the profiles that the CPIM service team manages and the profile that the tenant manages separate. -->
        <TechnicalProfile Id="PhoneFactor-Common">
          <DisplayName>PhoneFactor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="ClaimTypeOnWhichToEnable">amr</Item>
            <Item Key="ClaimValueOnWhichToEnable">mfa</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA" />
          <EnabledForUserJourneys>OnClaimsExistence</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="PhoneFactor-Verify-V2">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="PhoneFactor-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA" />
        </TechnicalProfile>
        <TechnicalProfile Id="PhoneFactor-Verify-V3">
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor1.1</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="PhoneFactor-Verify-V2" />
        </TechnicalProfile>
        <TechnicalProfile Id="PhoneFactor-Input-V2">
          <Metadata>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" DefaultValue="true" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="PhoneFactor-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="PhoneFactor-Input-V3">
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor1.1</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="PhoneFactor-Input-V2" />
        </TechnicalProfile>
        <!-- The following profiles use MFA controls 1.1. -->
        <TechnicalProfile Id="PhoneFactor-VerifyWithInput-V3">
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor1.1</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" PartnerClaimType="OfficePhone" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor-Input-V3" PartnerClaimType="newPhoneNumberEntered" />
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor" DefaultValue="true" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="PhoneFactor-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-MFA" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Azure Active Directory</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="AAD-UserWriteUsingAlternativeSecurityId">
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered, please press the back button and sign in instead.</Item>
          </Metadata>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmail" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="AlternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <PersistedClaim ClaimTypeReferenceId="userPrincipalName" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="mailNickName" DefaultValue="unknown" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <!-- The following other mails claim is needed for the case when a user is created, we get otherMails from directory. Self-asserted provider also has an
                 OutputClaims, and if this is absent, Self-Asserted provider will prompt the user for otherMails. -->
            <OutputClaim ClaimTypeReferenceId="otherMails" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommonForUserCreate" />
          <!-- <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" /> -->
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialSignup" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWriteUsingLogonName">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="UserId" PartnerClaimType="logonIdentifier.userName" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="userId" PartnerClaimType="logonIdentifier.userName" />
            <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="strongAuthenticationEmailAddress" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" DefaultValue="true" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommonForUserCreate" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWriteUsingLogonEmail">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="logonIdentifier.emailAddress" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="logonIdentifier.emailAddress" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" PartnerClaimType="logonIdentifier.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" DefaultValue="true" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommonForUserCreate" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWriteUsingObjectId">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWriteUsingObjectIdNoStrongAuth">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommon" />
        </TechnicalProfile>
        <!-- The following technical profile is used to read data when user authenticates using eSTS. -->
        <TechnicalProfile Id="AAD-UserReadUsingObjectId">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" PartnerClaimType="logonIdentifier.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-ReadCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingObjectId-CreateSubject">
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-UserReadUsingObjectId" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingObjectId-CheckRefreshTokenDate">
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="refreshTokensValidFromDateTime" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="AssertRefreshTokenIssuedLaterThanValidFromDate" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-UserReadUsingObjectId" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingAlternativeSecurityId">
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">User does not exist. Please sign up before you can sign in.</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="AlternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateEmailFromOtherMails" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-ReadCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingAlternativeSecurityId-NoError">
          <Metadata>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWritePasswordUsingLogonEmail">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="logonIdentifier.emailAddress" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="logonIdentifier.emailAddress" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWritePasswordUsingObjectId">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <PersistedClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserWritePasswordUsingObjectIdWithoutStrongAuth">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-DeleteUserUsingAlternativeSecurityId">
          <Metadata>
            <Item Key="Operation">DeleteClaimsPrincipal</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" Required="true" />
          </InputClaims>
          <OutputClaims />
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-DeleteClaimsUsingAlternativeSecurityId">
          <Metadata>
            <Item Key="Operation">DeleteClaims</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <OutputClaims />
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingLogonIdentifier">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="logonIdentifier" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingEmailAddress">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="logonIdentifier" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="accountEnabled" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="AssertAccountEnabledIsTrue" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-ReadCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-UserReadUsingUserNameAndValidateStrongAuthenticationEmailAddress">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userId" PartnerClaimType="logonIdentifier" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="accountEnabled" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" AlwaysUseDefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="AssertEmailAndStrongAuthenticationEmailAddressAreEqual" />
            <OutputClaimsTransformation ReferenceId="AssertAccountEnabledIsTrue" />
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-ReadCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-Common">
          <DisplayName>Azure Active Directory</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <!-- We need this here to suppress the SelfAsserted provider from invoking SSO on validation profiles.
      This can be removed when we do the legacy SSO session tidy up-->
          <IncludeInSso>false</IncludeInSso>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>

        <TechnicalProfile Id="AAD-WriteCommonForUserCreate">
          <Metadata>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
          </Metadata>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="displayName" DefaultValue="unknown" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-WriteCommon" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-WriteCommon">
          <Metadata>
            <Item Key="Operation">Write</Item>
          </Metadata>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
            <PersistedClaim ClaimTypeReferenceId="ageGroup" />
            <PersistedClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateEmailsFromOtherMailsAndSignInNamesInfo" />
            <OutputClaimsTransformation ReferenceId="AddStrongAuthenticationEmailToEmails" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="AAD-ReadCommon">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
            <OutputClaim ClaimTypeReferenceId="signInNamesInfo.emailAddress" PartnerClaimType="logonIdentifier.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateEmailsFromOtherMailsAndSignInNamesInfo" />
            <OutputClaimsTransformation ReferenceId="AddStrongAuthenticationEmailToEmails" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Self Asserted</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="SelfAsserted-Input">
          <DisplayName>Self Asserted</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <!-- Note: Claims such as emails are not listed here because without a ValidationTechnicalProfile when SelfAsserted-Input is shown to the user,
              the user will be prompted for such claims. As a result, that claim is kept in the technical profiles that have ValidationTechnicalProfile -->
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-Social">
          <DisplayName>User ID signup</DisplayName>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="blockMinorUser" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
            <OutputClaim ClaimTypeReferenceId="responseCode" />
            <OutputClaim ClaimTypeReferenceId="responseMsg" />
            <OutputClaim ClaimTypeReferenceId="response" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="SetFeatureDefaultValue" />
            <ValidationTechnicalProfile ReferenceId="EvaluateBlockMinorUserProfile" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingAlternativeSecurityId">
              <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                  <Value>blockMinorUser</Value>
                  <Value>True</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-Input" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-SocialSignup" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-Social-V2">
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted1.1</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-Social" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-ProfileUpdate">
          <DisplayName>User ID signup</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.profileupdate</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingObjectId" />
          </ValidationTechnicalProfiles>
          <IncludeClaimsFromTechnicalProfile>SelfAsserted-Input</IncludeClaimsFromTechnicalProfile>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-ProfileUpdate-V2">
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="ageGatingValuesChanged" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="EvaluateAgeGroupProfile" />
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-ProfileUpdate" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LogonIdentifierDiscovery-Username">
          <Metadata>
            <Item Key="SignUpTarget">SignUpWithLogonNameExchange</Item>
            <Item Key="setting.operatingMode">Username</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LogonIdentifierDiscovery" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LogonIdentifierDiscovery-Email">
          <Metadata>
            <Item Key="SignUpTarget">SignUpWithLogonEmailExchange</Item>
            <Item Key="setting.operatingMode">Email</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LogonIdentifierDiscovery" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LogonIdentifierDiscovery">
          <DisplayName>Logon Identifier Discovery</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="SignInTarget">SignInWithEvoSTS</Item>
          </Metadata>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="logonIdentifier" PartnerClaimType="logonIdentifier" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingLogonIdentifier" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-ProgressiveProfile">
          <DisplayName>Progressive Profiling for User SignIn</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.progressiveprofile</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="ageGatingValuesChanged" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </OutputClaims>
          <!-- The age gating logic here covers both the scenario of collecting DOB/legalCountry for the first time and the edge case where DOB/legalCountry is missing -->
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="EvaluateAgeGroupProfile" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="ShowBlockMinorPage">
          <DisplayName>Show Blocking Message For Minor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.blockminor</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="setting.showContinueButton">false</Item>
            <Item Key="setting.showCancelButton">false</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="GetResponseMsgMappedToResponseCode" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="responseMsg" DefaultValue=""/>
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="responseMsg" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Local Account</DisplayName>
      <TechnicalProfiles>
        <!-- This is a common (root) local account technical profile for both sign-in and sign-up using username -->
        <!-- This should be one of the only two technical profiles existing in tenant base-v1 -->
        <TechnicalProfile Id="LocalAccountUsername-Common">
          <DisplayName>Local Account Username</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="LocalAccountType">Username</Item>
          </Metadata>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <!-- This is a common (root) local account technical profile for both sign-in and sign-up using email -->
        <!-- This should be one of the only two technical profiles existing in tenant base-v1 -->
        <TechnicalProfile Id="LocalAccountEmail-Common">
          <DisplayName>Local Account Email</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="LocalAccountType">Email</Item>
          </Metadata>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Username">
          <Metadata>
            <Item Key="SignUpTarget">SignUpWithLogonNameExchange</Item>
            <Item Key="setting.operatingMode">Username</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LocalAccountSigninUsername-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email">
          <Metadata>
            <Item Key="SignUpTarget">SignUpWithLogonEmailExchange</Item>
            <Item Key="setting.operatingMode">Email</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LocalAccountSigninEmail-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Username-V2">
          <DisplayName>User ID signin</DisplayName>
          <Metadata>
            <Item Key="setting.operatingMode">Username</Item>
            <Item Key="setting.showSignupLink">false</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LocalAccountSigninUsername-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSignin-Email-V2">
          <DisplayName>Email signin</DisplayName>
          <Metadata>
            <Item Key="setting.operatingMode">Email</Item>
            <Item Key="setting.showSignupLink">false</Item>
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-LocalAccountSigninEmail-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSigninUsername-Common">
          <DisplayName>Local Account Signin</DisplayName>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" DefaultValue="{OIDC:LoginHint}" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="logonIdentifier" Required="true" />
            <OutputClaim ClaimTypeReferenceId="password" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="eSTS-NonInteractive" />
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountUsername-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="SelfAsserted-LocalAccountSigninEmail-Common">
          <DisplayName>Local Account Signin</DisplayName>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="logonIdentifier" DefaultValue="{OIDC:LoginHint}" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="logonIdentifier" Required="true" />
            <OutputClaim ClaimTypeReferenceId="password" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="eSTS-NonInteractive" />
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountEmail-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountContentOverrides">
          <DisplayName>Local Account Content Overrides</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="language.ver_intro_msg" />
            <Item Key="language.ver_info_msg" />
            <Item Key="language.ver_success_msg" />
            <Item Key="language.ver_incorrect_format" />
          </Metadata>
          <IncludeTechnicalProfile ReferenceId="SelfAsserted-Input" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignUpWithLogonName">
          <DisplayName>User ID signup</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountsignup</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="LocalAccountType">Username</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="UserId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" Required="true" />
            <OutputClaim ClaimTypeReferenceId="userId" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="sub" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonName" />
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountContentOverrides" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignUpWithLogonNameV2">
          <DisplayName>User ID signup</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountsignup1.1</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="LocalAccountType">Username</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="UserId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" Required="true" />
            <OutputClaim ClaimTypeReferenceId="userId" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="sub" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" />
            <OutputClaim ClaimTypeReferenceId="blockMinorUser" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
            <OutputClaim ClaimTypeReferenceId="responseCode" />
            <OutputClaim ClaimTypeReferenceId="responseMsg" />
            <OutputClaim ClaimTypeReferenceId="response" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="SetFeatureDefaultValue" />
            <ValidationTechnicalProfile ReferenceId="EvaluateBlockMinorUserProfile" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonName">
              <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                  <Value>blockMinorUser</Value>
                  <Value>True</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountContentOverrides" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountSignUpWithLogonEmail">
          <DisplayName>Email signup</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountsignup</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="LocalAccountType">Email</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonEmail" />
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountContentOverrides" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
        </TechnicalProfile>

        <TechnicalProfile Id="LocalAccountSignUpWithLogonEmailV2">
          <DisplayName>Email signup</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountsignup1.1</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="LocalAccountType">Email</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="localAccountUserCreatedInAAD" />
            <OutputClaim ClaimTypeReferenceId="blockMinorUser" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
            <OutputClaim ClaimTypeReferenceId="responseCode" />
            <OutputClaim ClaimTypeReferenceId="responseMsg" />
            <OutputClaim ClaimTypeReferenceId="response" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="SetFeatureDefaultValue" />
            <ValidationTechnicalProfile ReferenceId="EvaluateBlockMinorUserProfile" />
            <ValidationTechnicalProfile ReferenceId="AAD-UserWriteUsingLogonEmail">
              <Preconditions>
                <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
                  <Value>blockMinorUser</Value>
                  <Value>True</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>
          </ValidationTechnicalProfiles>
          <IncludeTechnicalProfile ReferenceId="LocalAccountContentOverrides" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-AAD" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountPasswordChangeWithLogonEmail">
          <DisplayName>Change password (username)</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordchange</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingLogonEmail" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountDiscoveryUsingUserNameAndValidateStrongAuthenticationEmailAddress">
          <DisplayName>Reset password using username</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordchange1.1</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="UserMessageIfClaimsTransformationStringsAreNotEqual">An account could not be found for the provided user ID.</Item>
            <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Your account has been locked. Contact your support person to unlock it, then try again.</Item>
            <Item Key="LocalAccountType">Username</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <!-- Reduce the default self-asserted retry limit of 7 for the reset journey -->
            <Item Key="setting.retryLimit">3</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="userId" Required="true" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingUserNameAndValidateStrongAuthenticationEmailAddress" />
          </ValidationTechnicalProfiles>
          <IncludeClaimsFromTechnicalProfile>SelfAsserted-Input</IncludeClaimsFromTechnicalProfile>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountDiscoveryUsingEmailAddress">
          <DisplayName>Reset password using email address</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordchange1.1</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <Item Key="AllowGenerationOfClaimsWithNullValues">true</Item>
            <Item Key="LocalAccountType">Email</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <!-- Reduce the default self-asserted retry limit of 7 for the reset journey -->
            <Item Key="setting.retryLimit">3</Item>
            <Item Key="UserMessageIfClaimsTransformationBooleanValueIsNotEqual">Your account has been locked. Contact your support person to unlock it, then try again.</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="emails" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
            <OutputClaim ClaimTypeReferenceId="ageGroup" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubjectClaimFromObjectID" />
          </OutputClaimsTransformations>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserReadUsingEmailAddress" />
          </ValidationTechnicalProfiles>
          <IncludeClaimsFromTechnicalProfile>SelfAsserted-Input</IncludeClaimsFromTechnicalProfile>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccountWritePasswordUsingObjectId">
          <DisplayName>Change password (username)</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccountpasswordchange1.1</Item>
            <Item Key="TokenLifeTimeInSeconds">3600</Item>
            <!-- Reduce the default self-asserted retry limit of 7 for the reset journey -->
            <Item Key="setting.retryLimit">3</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_JwtTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationEmailAddress" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectId">
              <Preconditions>
                <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
                  <Value>executed-PhoneFactor</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>
            <ValidationTechnicalProfile ReferenceId="AAD-UserWritePasswordUsingObjectIdWithoutStrongAuth">
              <Preconditions>
                <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
                  <Value>executed-PhoneFactor</Value>
                  <Action>SkipThisValidationTechnicalProfile</Action>
                </Precondition>
              </Preconditions>
            </ValidationTechnicalProfile>
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SM-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Session Management</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="SM-Noop">
          <DisplayName>Noop Session Management Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.NoopSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        </TechnicalProfile>
        <TechnicalProfile Id="SM-AAD">
          <DisplayName>Session Mananagement Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="logonIdentifier" />
            <PersistedClaim ClaimTypeReferenceId="authenticationSource" />
            <PersistedClaim ClaimTypeReferenceId="identityProvider" />
            <PersistedClaim ClaimTypeReferenceId="newUser" />
            <PersistedClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectIdFromSession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
        <!-- Profile name is being used to disambiguate AAD session between sign up and sign in -->
        <TechnicalProfile Id="SM-SocialSignup">
          <IncludeTechnicalProfile ReferenceId="SM-AAD" />
        </TechnicalProfile>
        <TechnicalProfile Id="SM-SocialLogin">
          <DisplayName>Session Mananagement Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.ExternalLoginSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        </TechnicalProfile>
        <TechnicalProfile Id="SM-MFA">
          <DisplayName>Session Mananagement Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="Verified.strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="isActiveMFASession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>User Journey Context Provider</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="SimpleUJContext">
          <DisplayName>User Journey Context Provider</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.UserJourneyContextProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="IP-Address" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Trustframework Policy Engine TechnicalProfiles</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
          <DisplayName>Trustframework Policy Engine Default Technical Profile</DisplayName>
          <Protocol Name="None" />
          <Metadata>
            <Item Key="url">{service:te}</Item>
          </Metadata>
        </TechnicalProfile>
        <TechnicalProfile Id="TpEngine_RefreshTokenReadAndSetup">
          <DisplayName>Trustframework Policy Engine Refresh Token Setup Technical Profile</DisplayName>
          <Protocol Name="None" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="refreshTokenIssuedOnDateTime" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Token Issuer</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="JwtIssuer">
          <DisplayName>JWT Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>JWT</OutputTokenFormat>
          <Metadata>
            <Item Key="client_id">{service:te}</Item>
            <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
            <Item Key="SendTokenResponseBodyWithJsonNumbers">true</Item>
            <Item Key="RefreshTokenUserJourneyId">RedeemRefreshTokenV1</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="B2C_1A_SigningKeyContainer" />
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_IdTokenSigningKeyContainer" />
            <Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_RefreshTokenEncryptionKeyContainer" />
          </CryptographicKeys>
          <InputClaims />
          <OutputClaims />
        </TechnicalProfile>
        <TechnicalProfile Id="JsonIssuer">
          <DisplayName>JSON Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>JSON</OutputTokenFormat>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_IdTokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="response" />
          </InputClaims>
          <OutputClaims />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="JwtResponseIssuer">
          <DisplayName>JWT Response Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>JWT</OutputTokenFormat>
          <IncludeTechnicalProfile ReferenceId="JwtIssuer" />
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <ClaimsProvider>
      <DisplayName>Evaluate Block User For GDPR</DisplayName>
      <TechnicalProfiles>
        <!-- Evaluate age group and check whether the ageGroup value or consentProvidedForMinor changed -->
        <TechnicalProfile Id="EvaluateAgeGroupProfile">
          <DisplayName>Evaluate age Group</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="ageGroup" DefaultValue="Undefined" />
            <OutputClaim ClaimTypeReferenceId="ageGatingValuesChanged" DefaultValue="false" />
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="ReEvaluateAgeGroupAndConsent" />
            <OutputClaimsTransformation ReferenceId="HasAgeGroupValueChanged" />
            <OutputClaimsTransformation ReferenceId="UpdateAgeGroup" />
            <OutputClaimsTransformation ReferenceId="HasConsentProvidedForMinorValueChanged" />
            <OutputClaimsTransformation ReferenceId="UpdateConsentProvidedForMinor" />
            <OutputClaimsTransformation ReferenceId="EvaluateAgeGatingValuesChanged" />
          </OutputClaimsTransformations>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="EvaluateBlockMinorUserProfile">
          <DisplayName>Evaluate Block User</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="responseMsg" DefaultValue=""/>
            <OutputClaim ClaimTypeReferenceId="responseCode" DefaultValue=""/>
            <OutputClaim ClaimTypeReferenceId="response" DefaultValue=""/>
            <OutputClaim ClaimTypeReferenceId="consentProvidedForMinor"/>
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CalculateAgeGroupAndConsent" />
            <OutputClaimsTransformation ReferenceId="SetIsMinor" />
            <OutputClaimsTransformation ReferenceId="IsUserMinorAndRequireParentalConsent" />
            <OutputClaimsTransformation ReferenceId="SetIsUserMinorAndIgnoreConsent" />
            <OutputClaimsTransformation ReferenceId="SetIsMinorNeedToBeBlocked" />
            <OutputClaimsTransformation ReferenceId="SetBlockMinorUserUsingResponseOption" />
            <OutputClaimsTransformation ReferenceId="GetResponseMsgMappedToResponseCode" />
            <OutputClaimsTransformation ReferenceId="MergeResponseMsgAndCode" />
          </OutputClaimsTransformations>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification">
          <DisplayName>Evaluate Block User Using LegalAgeGroupClassification claim</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <InputClaims>
            <!-- legalAgeGroupClassification is readonly claim  and gets set only by AAD based on ageGroup value. 
					So we are writing ageGroup value in AADWrite call. This internally sets legalAgeGroupClassification -->
            <InputClaim ClaimTypeReferenceId="legalAgeGroupClassification" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="responseCode" DefaultValue=""/>
            <OutputClaim ClaimTypeReferenceId="responseMsg" DefaultValue=""/>
            <OutputClaim ClaimTypeReferenceId="blockMinorUser" Required="true" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="SetIsLegalAgeGroupClassificationUndefined" />
            <OutputClaimsTransformation ReferenceId="SetIsLegalAgeGroupClassificationMinorWithoutConsent" />
            <OutputClaimsTransformation ReferenceId="CalculateIsUserMinorAndRequireParentalConsent" />
            <OutputClaimsTransformation ReferenceId="SetIsMinor" />
            <OutputClaimsTransformation ReferenceId="SetIsUserMinorAndIgnoreConsent" />
            <OutputClaimsTransformation ReferenceId="SetIsMinorNeedToBeBlocked" />
            <OutputClaimsTransformation ReferenceId="SetBlockMinorUserUsingResponseOption" />
            <OutputClaimsTransformation ReferenceId="GetResponseMsgMappedToResponseCode" />
            <OutputClaimsTransformation ReferenceId="MergeResponseMsgAndCode" />
          </OutputClaimsTransformations>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
        <TechnicalProfile Id="SetFeatureDefaultValue">
          <DisplayName>Set Feature Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="blockMinorUser" DefaultValue="false" />
            <!-- This is the claim used to indicate the option selected by basic policy author, which is block or allow minor -->
            <!-- This is an only place holder. It is always overwritten by leaf policy when age gating is turned on -->
            <!-- If the age gating feature is turned off, this claim will not be used -->
            <OutputClaim ClaimTypeReferenceId="shouldBlockMinor" DefaultValue="false"/>
            <OutputClaim ClaimTypeReferenceId="ageGatingValuesChanged" DefaultValue="false"/>
            <OutputClaim ClaimTypeReferenceId="ignoreConsent" DefaultValue="false"/>
          </OutputClaims>
        </TechnicalProfile>
        <TechnicalProfile Id="CalculateFeatureDefaultValue">
          <DisplayName>Calculate Feature Default Values</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.ClaimsTransformationProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="skipProgressiveProfilePage" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="IsDateOfBirthPresent" />
            <OutputClaimsTransformation ReferenceId="isLegalCountryPresent" />
            <OutputClaimsTransformation ReferenceId="EvaluateSkipProgressiveProfilePage" />
          </OutputClaimsTransformations>
          <EnabledForUserJourneys>Never</EnabledForUserJourneys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>
  <UserJourneys>
    <UserJourney Id="B2CSignUp_2FA">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections.signup" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonName" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- TODO: We need a check before step order 3 to make sure that the user is not already signed up. If the user is, then throw an error
          screen instead of showing the self-asserted page. This has always been the case but needs to be fixed. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We always create a directory entry for a user whether social or local account, so when we have
           an objectId from session use it to get the claims/additional claims from directory -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>objectIdFromSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user
          So, in that case, create the user in the directory (i.e. skip if localAccountAuthentication happened or SelfAsserted-Social were executed) -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignUp">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections.signup" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonName" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We always create a directory entry for a user whether social or local account, so when we have
           an objectId from session use it to get the claims/additional claims from directory -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>objectIdFromSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user
             So, in that case, create the user in the directory (i.e. skip if localAccountAuthentication happened or SelfAsserted-Social were executed) -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignUp_V2" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections.signup" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonNameV2" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmailV2" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is required for age gating feature turned off -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user
             So, in that case, create the user in the directory (i.e. skip if localAccountAuthentication happened or SelfAsserted-Social were executed) -->
        <!-- No need to evaluate blockMinor user for this case (SA-social skipped) since SA-social will never be skipped when age gating turned on -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We are NOT always creating a directory entry for a user whether social or local account, so only when we have
				an objectId from session, use it to get the claims/additional claims from directory -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <!-- Comment out this precondition temporarily to get calculated legalAgeGroupClassification -->
          <!-- This is an AAD bug and the precondition will be added back after the TFS item 423825 is done -->
          <!-- <Preconditions> -->
          <!-- <Precondition Type="ClaimsExist" ExecuteActionsIf="false"> -->
          <!-- <Value>objectIdFromSession</Value> -->
          <!-- <Action>SkipThisOrchestrationStep</Action> -->
          <!-- </Precondition> -->
          <!-- </Preconditions> -->
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user is not evaluated to be blocked and the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <!-- If blockMinorUser==True, executed-PhoneFactor-Input will not exist due to the precondition of step 7 -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="9" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true" >
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <!-- blockMinorUser is false by default -->
        <OrchestrationStep Order="11" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignIn_2FA">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignInWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="SignInWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignIn">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignInWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="SignInWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithAltSecId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
          in the token. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignIn_V2" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinwithpassword">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email-V2" />
            <ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This is step is for social sign-in -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithAltSecId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
          in the token. This is step is for local sign-in -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Calculate feature default value using existing claims (e.g., skipProgressiveProfilePage) -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CalculateFeatureDefaultValue" TechnicalProfileReferenceId="CalculateFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The step should be skipped if progressive profile claims already exist in journey storage -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-ProgressiveProfile" TechnicalProfileReferenceId="SelfAsserted-ProgressiveProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following steps before sendClaims are executed when the SelfAsserted-ProgressiveProfile is skipped -->
        <!-- AgeGroup needs to be calculated every time when a user tries to sign in, since the value can not be updated automatically in directory -->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <!-- When age gating off, the step is skipped due to EnabledForUserJourneys of "EvaluateAgeGroupProfile" technical profile -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateAgeGroup" TechnicalProfileReferenceId="EvaluateAgeGroupProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We need to write ageGroup to directory if it has a different value-->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is used to retrieve updated legalAgeGroupClassification based on instant-on -->
        <!-- This step should be removed if directory returns updated claim values for PATCH or they build-in DOB and legalCountry -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserRead" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaims" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!--Age Gating ON : Json response option selected then only JsonIssuer will be enabled for userjourney
					Age Gating ON : Json response option not selected then JsonIssuer will be disabled based on EnabledForUserJourneys
					Age Gating OFF : blockMinorUser is set to False in SetFeatureDefault and JsonIssuer is disabled -->
        <OrchestrationStep Order="15" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="16" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true" >
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="17" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignUpOrSignIn">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinandsignup">
          <ClaimsExchanges>
            <ClaimsExchange Id="LogonDiscoveryUsingEmail" TechnicalProfileReferenceId="SelfAsserted-LogonIdentifierDiscovery-Email" />
            <ClaimsExchange Id="LogonDiscoveryUsingUsername" TechnicalProfileReferenceId="SelfAsserted-LogonIdentifierDiscovery-Username" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Check if the user has selected to sign in using one of the social providers -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmail" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonName" />
            <ClaimsExchange Id="SignInWithEvoSTS" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
          in the token. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <!-- Add condition to not execute this step for sign up scenario based on newUser claim -->
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>localAccountUserCreatedInAAD</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
          So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
          step if account was created in the directory. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user has strongAuthenticationPhoneNumber in the directory, then use that for verification. This means user is already signed up for 2FA. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user does not have an account in the directory, then attempt to step up the user. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- All good. Send claims to the RP :-) -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignUpOrSignIn_V2" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinandsignup">
          <ClaimsExchanges>
            <ClaimsExchange Id="LogonDiscoveryUsingEmail" TechnicalProfileReferenceId="SelfAsserted-LogonIdentifierDiscovery-Email" />
            <ClaimsExchange Id="LogonDiscoveryUsingUsername" TechnicalProfileReferenceId="SelfAsserted-LogonIdentifierDiscovery-Username" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Check if the user has selected to sign in using one of the social providers -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmailV2" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonNameV2" />
            <ClaimsExchange Id="SignInWithEvoSTS" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is required for sign-in and social sign-up when age gating off and SA-Social skipped -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).
				This can only happen when authentication happened using a social IDP. If local account was created or authentication done
				using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <!-- The object Id may not exist due to blockMinorUser==True for local sign-up. In this case, skip the step -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
				So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
				step if account was created in the directory. -->
        <!-- The object may not exist due to blockMinorUser==True. In this case, do not write to directory -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
				the token. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <!-- Add condition to not execute this step for sign up scenario based on newUser claim -->
            <!-- Comment out this precondition temporarily to get calculated legalAgeGroupClassification -->
            <!-- This is an AAD bug and the precondition will be added back after the TFS item 423825 is done -->
            <!-- <Precondition Type="ClaimsExist" ExecuteActionsIf="true"> -->
            <!-- <Value>localAccountUserCreatedInAAD</Value> -->
            <!-- <Action>SkipThisOrchestrationStep</Action> -->
            <!-- </Precondition> -->
            <!-- <Precondition Type="ClaimEquals" ExecuteActionsIf="true"> -->
            <!-- <Value>authenticationSource</Value> -->
            <!-- <Value>socialIdpAuthentication</Value> -->
            <!-- <Action>SkipThisOrchestrationStep</Action> -->
            <!-- </Precondition> -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Calculate feature default value using existing claims (e.g., skipProgressiveProfilePage) -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CalculateFeatureDefaultValue" TechnicalProfileReferenceId="CalculateFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user has strongAuthenticationPhoneNumber in the directory, then use that for verification. This means user is already signed up for 2FA. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user does not have an account in the directory, then attempt to step up the user. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If all required claims for progressive profiling are showing up, then skip this step -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-ProgressiveProfile" TechnicalProfileReferenceId="SelfAsserted-ProgressiveProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following steps before sendClaims are executed when the SelfAsserted-ProgressiveProfile is skipped -->
        <!-- AgeGroup needs to be calculated every time when a user tries to sign in, since the value can not be updated automatically in directory -->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <!-- Skip this step if this is a sign-up (both local and social) -->
            <!-- When age gating on, SA-Social is always executed, so there is Executed-SelfAsserted-Input in journey storage -->
            <!-- When age gating off, the step is skipped due to EnabledForUserJourneys of "EvaluateAgeGroupProfile" technical profile -->
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateAgeGroup" TechnicalProfileReferenceId="EvaluateAgeGroupProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <!-- We need to write ageGroup to directory if it has a different value-->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <!-- This step is used to retrieve updated legalAgeGroupClassification based on instant-on -->
        <!-- This step should be removed if directory returns updated claim values for PATCH or they build-in DOB and legalCountry -->
        <OrchestrationStep Order="15" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserRead" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <OrchestrationStep Order="16" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaims" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="17" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true" >
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="18" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>

        <!-- All good. Send claims to the RP :-) -->
        <OrchestrationStep Order="19" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CSignUpOrSignInWithPassword">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinandsignupwithpassword">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
            <ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Check if the user has selected to sign in using one of the social providers -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmailV2" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonNameV2" />
            <ClaimsExchange Id="ReadAndCreateSsoSession" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CreateSubject" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).
          This can only happen when authentication happened using a social IDP. If local account was created or authentication done
          using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
          in the token. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <!-- Add condition to not execute this step for sign up scenario based on newUser claim -->
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>localAccountUserCreatedInAAD</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
          So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
          step if account was created in the directory. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user has strongAuthenticationPhoneNumber in the directory, then use that for verification. This means user is already signed up for 2FA. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user does not have an account in the directory, then attempt to step up the user. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- All good. Send claims to the RP :-) -->
        <OrchestrationStep Order="10" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <UserJourney Id="B2CSignUpOrSignInWithPassword_V2" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinandsignupwithpassword">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email" />
            <ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Check if the user has selected to sign in using one of the social providers -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignUpWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonEmailV2" />
            <ClaimsExchange Id="SignUpWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignUpWithLogonNameV2" />
            <ClaimsExchange Id="ReadAndCreateSsoSession" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CreateSubject" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is required for sign-in and social sign-up when age gating off and SA-Social skipped -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If social IDP authentication is used, then attempt to find the user account in the directory. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadUsingAlternativeSecurityId" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId-NoError" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Show self-asserted page only if the directory does not have the user account already (i.e. we do not have an objectId).
			 This can only happen when authentication happened using a social IDP. If local account was created or authentication done
			 using ESTS in step 2, then an user account must exist in the directory by this time. -->
        <!-- The object Id may not exist due to blockMinorUser==True for local sign-up. In this case, skip the step -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-Social" TechnicalProfileReferenceId="SelfAsserted-Social-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The previous step (SelfAsserted-Social) could have been skipped if there were no attributes to collect from the user.
			 So, in that case, create the user in the directory if one does not already exist (verified using objectId which would be set from the last
			 step if account was created in the directory. -->
        <!-- The object id may not exist due to blockMinorUser==True. In this case, we intentionally don't want to write blocked users into the directory -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
			 in the token. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <!-- Add condition to not execute this step for sign up scenario based on newUser claim -->
            <!-- Comment out this preconditions temporarily to get calculated legalAgeGroupClassification -->
            <!-- This is an AAD bug and the preconditions will be added back after the TFS item 423825 is done -->

            <!-- <Precondition Type="ClaimsExist" ExecuteActionsIf="true"> -->
            <!-- <Value>localAccountUserCreatedInAAD</Value> -->
            <!-- <Action>SkipThisOrchestrationStep</Action> -->
            <!-- </Precondition> -->
            <!-- <Precondition Type="ClaimEquals" ExecuteActionsIf="true"> -->
            <!-- <Value>authenticationSource</Value> -->
            <!-- <Value>socialIdpAuthentication</Value> -->
            <!-- <Action>SkipThisOrchestrationStep</Action> -->
            <!-- </Precondition> -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Calculate feature default value using existing claims (e.g., skipProgressiveProfilePage) -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CalculateFeatureDefaultValue" TechnicalProfileReferenceId="CalculateFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user has strongAuthenticationPhoneNumber in the directory, then use that for verification. This means user is already signed up for 2FA. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-Verify-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user does not have an account in the directory, then attempt to step up the user. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActiveMFASession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Input" TechnicalProfileReferenceId="PhoneFactor-Input-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user stepped up and provided a fresh phone number, then write it in the directory for future authentication requests. -->
        <!-- If blockMinorUser==True, executed-PhoneFactor-Input will not exist based on step 9 and 10 -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If all required claims for progressive profiling are showing up, then skip this step -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-ProgressiveProfile" TechnicalProfileReferenceId="SelfAsserted-ProgressiveProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following steps before sendClaims are executed when the SelfAsserted-ProgressiveProfile is skipped -->
        <!-- AgeGroup needs to be calculated every time when a user tries to sign in, since the value can not be updated automatically in directory -->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <!-- Skip this step if this is a sign-up (both local and social) -->
            <!-- When age gating on, SA-Social is always executed, then there is Executed-SelfAsserted-Input in journey storage -->
            <!-- When age gating off, the step is skipped due to EnabledForUserJourneys of "EvaluateAgeGroupProfile" technical profile -->
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateAgeGroup" TechnicalProfileReferenceId="EvaluateAgeGroupProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <!-- We need to write ageGroup to directory if it has a different value-->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <!-- This step is used to retrieve updated legalAgeGroupClassification based on instant-on -->
        <!-- This step should be removed if directory returns updated claim values for PATCH or they build-in DOB and legalCountry -->
        <OrchestrationStep Order="15" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserRead" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Skip this step if this is a sign-up (both local and social) -->
        <OrchestrationStep Order="16" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>Executed-SelfAsserted-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaims" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="17" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="18" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>

        <!-- All good. Send claims to the RP :-) -->
        <OrchestrationStep Order="19" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>

    <UserJourney Id="B2CUserProfileUpdate">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="SignInWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="SignInWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountSignInWithEvoSts" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserRead" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user ever stepped up to use 2FA, profile update must verify this because the user will be able to change
          their sign in email address or strong authentication email here. This guards against scenarios where a user's
          password is stolen, the attacker can change the email addresses leaving no way for the user to recover their account.
          By requiring 2FA, stolen passwords cannot be used to take over the account completely. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor" TechnicalProfileReferenceId="PhoneFactor-Verify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="B2CUserProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="7" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CUserProfileUpdate_V2"  DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signinwithpassword">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountSigninEmailExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Email-V2" />
            <ClaimsExchange Id="LocalAccountSigninUsernameExchange" TechnicalProfileReferenceId="SelfAsserted-LocalAccountSignin-Username-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="false" >
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="MicrosoftAccountExchange" TechnicalProfileReferenceId="MSA-OIDC" />
            <ClaimsExchange Id="GoogleExchange" TechnicalProfileReferenceId="Google-OAUTH" />
            <ClaimsExchange Id="FacebookExchange" TechnicalProfileReferenceId="Facebook-OAUTH" />
            <ClaimsExchange Id="LinkedInExchange" TechnicalProfileReferenceId="LinkedIn-OAUTH" />
            <ClaimsExchange Id="AmazonExchange" TechnicalProfileReferenceId="Amazon-OAUTH" />
            <ClaimsExchange Id="WeiboExchange" TechnicalProfileReferenceId="Weibo-OAUTH" />
            <ClaimsExchange Id="QQExchange" TechnicalProfileReferenceId="QQ-OAUTH" />
            <ClaimsExchange Id="WeChatExchange" TechnicalProfileReferenceId="WeChat-OAUTH" />
            <ClaimsExchange Id="TwitterExchange" TechnicalProfileReferenceId="Twitter-OAUTH1" />
            <ClaimsExchange Id="GitHubExchange" TechnicalProfileReferenceId="GitHub-OAUTH2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <!-- To cover existing SSO cookies with the old value -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserRead" TechnicalProfileReferenceId="AAD-UserReadUsingAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step reads any user attributes that we may not have received when authenticating using ESTS so they can be sent
				in the token. This is step is for local sign-in -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialIdpAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Calculate feature default value using existing claims (e.g., skipProgressiveProfilePage) -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CalculateFeatureDefaultValue" TechnicalProfileReferenceId="CalculateFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- If the user ever stepped up to use 2FA, profile update must verify this because the user will be able to change
          their sign in email address or strong authentication email here. This guards against scenarios where a user's
          password is stolen, the attacker can change the email addresses leaving no way for the user to recover their account.
          By requiring 2FA, stolen passwords cannot be used to take over the account completely. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor" TechnicalProfileReferenceId="PhoneFactor-Verify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The step should be skipped if progressive profile claims already exist in journey storage -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-ProgressiveProfile" TechnicalProfileReferenceId="SelfAsserted-ProgressiveProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following steps before sendClaims are executed when the SelfAsserted-ProgressiveProfile is skipped -->
        <!-- AgeGroup needs to be calculated every time when a user tries to sign in, since the value can not be updated automatically in directory -->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <!-- When age gating off, the step is skipped due to EnabledForUserJourneys of "EvaluateAgeGroupProfile" technical profile -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateAgeGroup" TechnicalProfileReferenceId="EvaluateAgeGroupProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We need to write ageGroup to directory if it has a different value-->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is used to retrieve updated legalAgeGroupClassification based on instant-on -->
        <!-- This step should be removed if directory returns updated claim values for PATCH or they build-in DOB and legalCountry -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserRead" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaims" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="B2CUserProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate-V2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserReadAfterProfileEdit" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="15" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaimsAfterProfileEdit" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="16" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="17" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true" >
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="18" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CPasswordResetUsingEmailVerification">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections">
          <ClaimsProviderSelections>
            <!--ClaimsProviderSelection TargetClaimsExchangeId="PasswordChangeWithLogonNameExchange" /-->
            <ClaimsProviderSelection TargetClaimsExchangeId="PasswordChangeWithLogonEmailExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!--ClaimsExchange Id="PasswordChangeWithLogonNameExchange" TechnicalProfileReferenceId="LocalAccountPasswordChangeWithLogonName" /-->
            <ClaimsExchange Id="PasswordChangeWithLogonEmailExchange" TechnicalProfileReferenceId="LocalAccountPasswordChangeWithLogonEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CPasswordResetV1">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PasswordResetUsingUserNameExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingUserNameAndValidateStrongAuthenticationEmailAddress" />
            <ClaimsExchange Id="PasswordResetUsingEmailAddressExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-VerifyWithInput-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="B2CPasswordReset_V2" DefaultCpimIssuerTechnicalProfileReferenceId="JwtIssuer">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselections" />
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PasswordResetUsingUserNameExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingUserNameAndValidateStrongAuthenticationEmailAddress" />
            <ClaimsExchange Id="PasswordResetUsingEmailAddressExchange" TechnicalProfileReferenceId="LocalAccountDiscoveryUsingEmailAddress" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SetFeatureDefaultValue" TechnicalProfileReferenceId="SetFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Calculate feature default value using existing claims (e.g., skipProgressiveProfilePage) -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CalculateFeatureDefaultValue" TechnicalProfileReferenceId="CalculateFeatureDefaultValue" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactor-Verify" TechnicalProfileReferenceId="PhoneFactor-VerifyWithInput-V3" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- Save MFA phone number: The precondition verifies whether the user provided a new number in the 
                     previous step. If so, then the phone number is stored in the directory for future authentication 
                     requests. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input-V3</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserWriteWithObjectId" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The step should be skipped if progressive profile claims already exist in journey storage -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAsserted-ProgressiveProfile" TechnicalProfileReferenceId="SelfAsserted-ProgressiveProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following steps before sendClaims are executed when the SelfAsserted-ProgressiveProfile is skipped -->
        <!-- AgeGroup needs to be calculated every time when a user tries to sign in, since the value can not be updated automatically in directory -->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <!-- When age gating off, the step is skipped due to EnabledForUserJourneys of "EvaluateAgeGroupProfile" technical profile -->
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateAgeGroup" TechnicalProfileReferenceId="EvaluateAgeGroupProfile" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- We need to write ageGroup to directory if it has a different value-->
        <!-- This step should be removed when directory build-in DOB and legalCountry -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>skipProgressiveProfilePage</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserWrite" TechnicalProfileReferenceId="AAD-UserWriteUsingObjectIdNoStrongAuth" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- This step is used to retrieve updated legalAgeGroupClassification based on instant-on -->
        <!-- This step should be removed if directory returns updated claim values for PATCH or they build-in DOB and legalCountry -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>ageGatingValuesChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AAD-UserRead" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="EvaluateBlockMinorUserClaims" TechnicalProfileReferenceId="EvaluateBlockMinorUserProfile_UsingLegalAgeGroupClassification" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="12" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JsonIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="13" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="ShowBlockMinorPage">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true" >
              <Value>blockMinorUser</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="NewCredentials" TechnicalProfileReferenceId="LocalAccountWritePasswordUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="15" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>blockMinorUser</Value>
              <Value>True</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
        </OrchestrationStep>
      </OrchestrationSteps>
      <ClientDefinition ReferenceId="DefaultWeb" />
    </UserJourney>
    <UserJourney Id="RedeemRefreshTokenV1">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="RefreshTokenSetupExchange" TechnicalProfileReferenceId="TpEngine_RefreshTokenReadAndSetup" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="CheckRefreshTokenDateFromAadExchange" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId-CheckRefreshTokenDate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
    <UserJourney Id="B2CResourceOwner" NonInteractive="true">
      <AssuranceLevel>LOA1</AssuranceLevel>
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="ResourceOwnerFlow" TechnicalProfileReferenceId="LocalAccountSignInWithROPC" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AADUserReadWithObjectId" TechnicalProfileReferenceId="AAD-UserReadUsingObjectId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="JwtIssuer" />
      </OrchestrationSteps>
    </UserJourney>
  </UserJourneys>
</TrustFrameworkPolicy>